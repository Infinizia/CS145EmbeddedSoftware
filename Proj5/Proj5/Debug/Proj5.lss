
Proj5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020e  00800060  00001650  000016e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000110  0080026e  0080026e  000018f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c56  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c41  00000000  00000000  0000376a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fb6  00000000  00000000  000043ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00005364  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  000058b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016af  00000000  00000000  00005e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000074d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	23 e0       	ldi	r18, 0x03	; 3
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 04 	call	0x906	; 0x906 <main>
      8a:	0c 94 26 0b 	jmp	0x164c	; 0x164c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wait_avr>:
  WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
      92:	9c 01       	movw	r18, r24
  //TCCR0 = 3;
  TCCR0 = 2;
      94:	82 e0       	ldi	r24, 0x02	; 2
      96:	83 bf       	out	0x33, r24	; 51
  while (msec--) {
    //TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
      98:	83 ef       	ldi	r24, 0xF3	; 243
void
wait_avr(unsigned short msec)
{
  //TCCR0 = 3;
  TCCR0 = 2;
  while (msec--) {
      9a:	08 c0       	rjmp	.+16     	; 0xac <wait_avr+0x1a>
    //TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
      9c:	82 bf       	out	0x32, r24	; 50
    SET_BIT(TIFR, TOV0);
      9e:	98 b7       	in	r25, 0x38	; 56
      a0:	91 60       	ori	r25, 0x01	; 1
      a2:	98 bf       	out	0x38, r25	; 56
    WDR();
      a4:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
      a6:	08 b6       	in	r0, 0x38	; 56
      a8:	00 fe       	sbrs	r0, 0
      aa:	fd cf       	rjmp	.-6      	; 0xa6 <wait_avr+0x14>
void
wait_avr(unsigned short msec)
{
  //TCCR0 = 3;
  TCCR0 = 2;
  while (msec--) {
      ac:	21 50       	subi	r18, 0x01	; 1
      ae:	31 09       	sbc	r19, r1
      b0:	a8 f7       	brcc	.-22     	; 0x9c <wait_avr+0xa>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
      b2:	13 be       	out	0x33, r1	; 51
      b4:	08 95       	ret

000000b6 <wait_avr2>:
}
void
wait_avr2(unsigned short msec)
{
      b6:	9c 01       	movw	r18, r24
	TCCR0 = 3;
      b8:	83 e0       	ldi	r24, 0x03	; 3
      ba:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
      bc:	83 e8       	ldi	r24, 0x83	; 131
}
void
wait_avr2(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      be:	08 c0       	rjmp	.+16     	; 0xd0 <wait_avr2+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
      c0:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
      c2:	98 b7       	in	r25, 0x38	; 56
      c4:	91 60       	ori	r25, 0x01	; 1
      c6:	98 bf       	out	0x38, r25	; 56
		WDR();
      c8:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
      ca:	08 b6       	in	r0, 0x38	; 56
      cc:	00 fe       	sbrs	r0, 0
      ce:	fd cf       	rjmp	.-6      	; 0xca <wait_avr2+0x14>
}
void
wait_avr2(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      d0:	21 50       	subi	r18, 0x01	; 1
      d2:	31 09       	sbc	r19, r1
      d4:	a8 f7       	brcc	.-22     	; 0xc0 <wait_avr2+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
      d6:	13 be       	out	0x33, r1	; 51
      d8:	08 95       	ret

000000da <test_key>:
 extern char buf[17];
 extern int num;
 extern int sizeOfSong;

 void test_key(char key)
 {
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	61 97       	sbiw	r28, 0x11	; 17
      e8:	0f b6       	in	r0, 0x3f	; 63
      ea:	f8 94       	cli
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	0f be       	out	0x3f, r0	; 63
      f0:	cd bf       	out	0x3d, r28	; 61
	 char buf2[17];
	 sprintf(buf2, "%c",  key);
      f2:	1f 92       	push	r1
      f4:	8f 93       	push	r24
      f6:	8b ed       	ldi	r24, 0xDB	; 219
      f8:	91 e0       	ldi	r25, 0x01	; 1
      fa:	9f 93       	push	r25
      fc:	8f 93       	push	r24
      fe:	8e 01       	movw	r16, r28
     100:	0f 5f       	subi	r16, 0xFF	; 255
     102:	1f 4f       	sbci	r17, 0xFF	; 255
     104:	1f 93       	push	r17
     106:	0f 93       	push	r16
     108:	0e 94 3c 08 	call	0x1078	; 0x1078 <sprintf>
	 pos_lcd(1, 0);
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
	 puts_lcd2(buf2);
     114:	c8 01       	movw	r24, r16
     116:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
	 wait_avr2(50);
     11a:	82 e3       	ldi	r24, 0x32	; 50
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 5b 00 	call	0xb6	; 0xb6 <wait_avr2>
 }
     122:	0f 90       	pop	r0
     124:	0f 90       	pop	r0
     126:	0f 90       	pop	r0
     128:	0f 90       	pop	r0
     12a:	0f 90       	pop	r0
     12c:	0f 90       	pop	r0
     12e:	61 96       	adiw	r28, 0x11	; 17
     130:	0f b6       	in	r0, 0x3f	; 63
     132:	f8 94       	cli
     134:	de bf       	out	0x3e, r29	; 62
     136:	0f be       	out	0x3f, r0	; 63
     138:	cd bf       	out	0x3d, r28	; 61
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	1f 91       	pop	r17
     140:	0f 91       	pop	r16
     142:	08 95       	ret

00000144 <piano>:
 int piano()
 {
	 key = get_key_value();
     144:	0e 94 98 02 	call	0x530	; 0x530 <get_key_value>
     148:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <key>
	 if (key == '1') // CDEFGABC
     14c:	81 33       	cpi	r24, 0x31	; 49
     14e:	51 f4       	brne	.+20     	; 0x164 <piano+0x20>
	 {
		 play_note2(C4, 1, FASTER);
     150:	2a e9       	ldi	r18, 0x9A	; 154
     152:	39 e9       	ldi	r19, 0x99	; 153
     154:	49 e9       	ldi	r20, 0x99	; 153
     156:	5e e3       	ldi	r21, 0x3E	; 62
     158:	61 e0       	ldi	r22, 0x01	; 1
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	86 e0       	ldi	r24, 0x06	; 6
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
	 }
	 if (key == '2')
     164:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     168:	82 33       	cpi	r24, 0x32	; 50
     16a:	51 f4       	brne	.+20     	; 0x180 <piano+0x3c>
	 {
		 play_note2(D4, 1, FASTER);
     16c:	2a e9       	ldi	r18, 0x9A	; 154
     16e:	39 e9       	ldi	r19, 0x99	; 153
     170:	49 e9       	ldi	r20, 0x99	; 153
     172:	5e e3       	ldi	r21, 0x3E	; 62
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	86 e2       	ldi	r24, 0x26	; 38
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
	 }
	 if (key == '3')
     180:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     184:	83 33       	cpi	r24, 0x33	; 51
     186:	51 f4       	brne	.+20     	; 0x19c <piano+0x58>
	 {
		 play_note2(E4, 1, FASTER);
     188:	2a e9       	ldi	r18, 0x9A	; 154
     18a:	39 e9       	ldi	r19, 0x99	; 153
     18c:	49 e9       	ldi	r20, 0x99	; 153
     18e:	5e e3       	ldi	r21, 0x3E	; 62
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	70 e0       	ldi	r23, 0x00	; 0
     194:	8a e4       	ldi	r24, 0x4A	; 74
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
	 }
	 if (key == '4')
     19c:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     1a0:	84 33       	cpi	r24, 0x34	; 52
     1a2:	51 f4       	brne	.+20     	; 0x1b8 <piano+0x74>
	 {
		 play_note2(F4, 1, FASTER);
     1a4:	2a e9       	ldi	r18, 0x9A	; 154
     1a6:	39 e9       	ldi	r19, 0x99	; 153
     1a8:	49 e9       	ldi	r20, 0x99	; 153
     1aa:	5e e3       	ldi	r21, 0x3E	; 62
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	70 e0       	ldi	r23, 0x00	; 0
     1b0:	8d e5       	ldi	r24, 0x5D	; 93
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
	 }
	 if (key == '5')
     1b8:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     1bc:	85 33       	cpi	r24, 0x35	; 53
     1be:	51 f4       	brne	.+20     	; 0x1d4 <piano+0x90>
	 {
		 play_note2(G4, 1, FASTER);
     1c0:	2a e9       	ldi	r18, 0x9A	; 154
     1c2:	39 e9       	ldi	r19, 0x99	; 153
     1c4:	49 e9       	ldi	r20, 0x99	; 153
     1c6:	5e e3       	ldi	r21, 0x3E	; 62
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	88 e8       	ldi	r24, 0x88	; 136
     1ce:	91 e0       	ldi	r25, 0x01	; 1
     1d0:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
	 }
	 if (key == '6')
     1d4:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     1d8:	86 33       	cpi	r24, 0x36	; 54
     1da:	51 f4       	brne	.+20     	; 0x1f0 <piano+0xac>
	 {
		 play_note2(A4, 1, FASTER);
     1dc:	2a e9       	ldi	r18, 0x9A	; 154
     1de:	39 e9       	ldi	r19, 0x99	; 153
     1e0:	49 e9       	ldi	r20, 0x99	; 153
     1e2:	5e e3       	ldi	r21, 0x3E	; 62
     1e4:	61 e0       	ldi	r22, 0x01	; 1
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	88 eb       	ldi	r24, 0xB8	; 184
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
	 }
	 if (key == '7')
     1f0:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     1f4:	87 33       	cpi	r24, 0x37	; 55
     1f6:	51 f4       	brne	.+20     	; 0x20c <piano+0xc8>
	 {
		 play_note2(B4, 1, FASTER);
     1f8:	2a e9       	ldi	r18, 0x9A	; 154
     1fa:	39 e9       	ldi	r19, 0x99	; 153
     1fc:	49 e9       	ldi	r20, 0x99	; 153
     1fe:	5e e3       	ldi	r21, 0x3E	; 62
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	8e ee       	ldi	r24, 0xEE	; 238
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
	 }
	 if (key == '8')
     20c:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     210:	88 33       	cpi	r24, 0x38	; 56
     212:	51 f4       	brne	.+20     	; 0x228 <piano+0xe4>
	 {
		 play_note2(C5, 1, FASTER);
     214:	2a e9       	ldi	r18, 0x9A	; 154
     216:	39 e9       	ldi	r19, 0x99	; 153
     218:	49 e9       	ldi	r20, 0x99	; 153
     21a:	5e e3       	ldi	r21, 0x3E	; 62
     21c:	61 e0       	ldi	r22, 0x01	; 1
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	8b e0       	ldi	r24, 0x0B	; 11
     222:	92 e0       	ldi	r25, 0x02	; 2
     224:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
	 }

	 if (key != 'Z')
     228:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     22c:	8a 35       	cpi	r24, 0x5A	; 90
     22e:	11 f0       	breq	.+4      	; 0x234 <piano+0xf0>
		test_key(key);
     230:	0e 94 6d 00 	call	0xda	; 0xda <test_key>

	 return key;
     234:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
 }
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	08 95       	ret

0000023c <recordSong>:
 bool recordSong(char* recording, int size)
 {
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	7c 01       	movw	r14, r24
     248:	8b 01       	movw	r16, r22
	 wait_avr2(5);
     24a:	85 e0       	ldi	r24, 0x05	; 5
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 5b 00 	call	0xb6	; 0xb6 <wait_avr2>
	 char key = piano();
     252:	0e 94 a2 00 	call	0x144	; 0x144 <piano>
     256:	c8 2f       	mov	r28, r24

	 clr_lcd();
     258:	0e 94 4e 03 	call	0x69c	; 0x69c <clr_lcd>
	 sprintf(buf, "Rec. NoteLeft:%i", size-num);
     25c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num>
     260:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num+0x1>
     264:	98 01       	movw	r18, r16
     266:	28 1b       	sub	r18, r24
     268:	39 0b       	sbc	r19, r25
     26a:	c9 01       	movw	r24, r18
     26c:	9f 93       	push	r25
     26e:	2f 93       	push	r18
     270:	83 ec       	ldi	r24, 0xC3	; 195
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	9f 93       	push	r25
     276:	8f 93       	push	r24
     278:	8d e6       	ldi	r24, 0x6D	; 109
     27a:	93 e0       	ldi	r25, 0x03	; 3
     27c:	9f 93       	push	r25
     27e:	8f 93       	push	r24
     280:	0e 94 3c 08 	call	0x1078	; 0x1078 <sprintf>
	 pos_lcd(0, 0);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	80 e0       	ldi	r24, 0x00	; 0
     288:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
	 puts_lcd2(buf);
     28c:	8d e6       	ldi	r24, 0x6D	; 109
     28e:	93 e0       	ldi	r25, 0x03	; 3
     290:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>

	if (key != 'Z')
     294:	0f 90       	pop	r0
     296:	0f 90       	pop	r0
     298:	0f 90       	pop	r0
     29a:	0f 90       	pop	r0
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	ca 35       	cpi	r28, 0x5A	; 90
     2a2:	29 f1       	breq	.+74     	; 0x2ee <recordSong+0xb2>
	{
		if (key == '1' || key == '2'|| key == '3'|| key == '4'|| 
     2a4:	8f ec       	ldi	r24, 0xCF	; 207
     2a6:	8c 0f       	add	r24, r28
     2a8:	88 30       	cpi	r24, 0x08	; 8
     2aa:	88 f4       	brcc	.+34     	; 0x2ce <recordSong+0x92>
		key == '5'|| key == '6'|| key == '7'|| key == '8')
		{
			recording[num] = key;
     2ac:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num>
     2b0:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num+0x1>
     2b4:	f7 01       	movw	r30, r14
     2b6:	e8 0f       	add	r30, r24
     2b8:	f9 1f       	adc	r31, r25
     2ba:	c0 83       	st	Z, r28
			num++;
     2bc:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num>
     2c0:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num+0x1>
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <num+0x1>
     2ca:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <num>
		}
		if (key == '*') // exit before size done, must save the current size
     2ce:	ca 32       	cpi	r28, 0x2A	; 42
     2d0:	71 f4       	brne	.+28     	; 0x2ee <recordSong+0xb2>
		{
			sizeOfSong = num;
     2d2:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num>
     2d6:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num+0x1>
     2da:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <__data_end+0x1>
     2de:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
			num = 0;
     2e2:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <num+0x1>
     2e6:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <num>
			return true;
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	12 c0       	rjmp	.+36     	; 0x312 <recordSong+0xd6>
		}
	}

	if (num == size) // the size is done
     2ee:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num>
     2f2:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num+0x1>
     2f6:	08 17       	cp	r16, r24
     2f8:	19 07       	cpc	r17, r25
     2fa:	51 f4       	brne	.+20     	; 0x310 <recordSong+0xd4>
	{
		sizeOfSong = num;
     2fc:	10 93 6f 02 	sts	0x026F, r17	; 0x80026f <__data_end+0x1>
     300:	00 93 6e 02 	sts	0x026E, r16	; 0x80026e <__data_end>
		num = 0;
     304:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <num+0x1>
     308:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <num>
		return true;
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	01 c0       	rjmp	.+2      	; 0x312 <recordSong+0xd6>
	}

	return false;
     310:	80 e0       	ldi	r24, 0x00	; 0
 }
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	08 95       	ret

0000031e <compare_game_key>:
 bool compare_game_key(char* gameSong, int size, int songNum)
 {
     31e:	df 92       	push	r13
     320:	ef 92       	push	r14
     322:	ff 92       	push	r15
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	7c 01       	movw	r14, r24
     32e:	eb 01       	movw	r28, r22
     330:	8a 01       	movw	r16, r20
	 wait_avr2(5);
     332:	85 e0       	ldi	r24, 0x05	; 5
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 5b 00 	call	0xb6	; 0xb6 <wait_avr2>
	 char key = piano();
     33a:	0e 94 a2 00 	call	0x144	; 0x144 <piano>
	 if (num < size)
     33e:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <num>
     342:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <num+0x1>
     346:	2c 17       	cp	r18, r28
     348:	3d 07       	cpc	r19, r29
     34a:	0c f0       	brlt	.+2      	; 0x34e <compare_game_key+0x30>
     34c:	7a c0       	rjmp	.+244    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	return false;
 }
 bool compare_game_key(char* gameSong, int size, int songNum)
 {
	 wait_avr2(5);
	 char key = piano();
     34e:	d8 2e       	mov	r13, r24
	 if (num < size)
	 {		 
		clr_lcd();
     350:	0e 94 4e 03 	call	0x69c	; 0x69c <clr_lcd>
		sprintf(buf, "Press: %c", gameSong[num]);
     354:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <num>
     358:	f0 91 71 02 	lds	r31, 0x0271	; 0x800271 <num+0x1>
     35c:	ee 0d       	add	r30, r14
     35e:	ff 1d       	adc	r31, r15
     360:	80 81       	ld	r24, Z
     362:	1f 92       	push	r1
     364:	8f 93       	push	r24
     366:	84 ed       	ldi	r24, 0xD4	; 212
     368:	91 e0       	ldi	r25, 0x01	; 1
     36a:	9f 93       	push	r25
     36c:	8f 93       	push	r24
     36e:	0d e6       	ldi	r16, 0x6D	; 109
     370:	13 e0       	ldi	r17, 0x03	; 3
     372:	1f 93       	push	r17
     374:	0f 93       	push	r16
     376:	0e 94 3c 08 	call	0x1078	; 0x1078 <sprintf>
		pos_lcd(0, 0);
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
		puts_lcd2(buf);
     382:	c8 01       	movw	r24, r16
     384:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
		sprintf(buf, "%02i/%02i", size-num, size);
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num>
     390:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num+0x1>
     394:	c8 1b       	sub	r28, r24
     396:	d9 0b       	sbc	r29, r25
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	8e ed       	ldi	r24, 0xDE	; 222
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	9f 93       	push	r25
     3a2:	8f 93       	push	r24
     3a4:	1f 93       	push	r17
     3a6:	0f 93       	push	r16
     3a8:	0e 94 3c 08 	call	0x1078	; 0x1078 <sprintf>
		pos_lcd(1, 11);
     3ac:	6b e0       	ldi	r22, 0x0B	; 11
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
		puts_lcd2(buf);
     3b4:	c8 01       	movw	r24, r16
     3b6:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>

		 if( key == gameSong[num])
     3ba:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num>
     3be:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num+0x1>
     3c2:	f7 01       	movw	r30, r14
     3c4:	e8 0f       	add	r30, r24
     3c6:	f9 1f       	adc	r31, r25
     3c8:	8d b7       	in	r24, 0x3d	; 61
     3ca:	9e b7       	in	r25, 0x3e	; 62
     3cc:	0e 96       	adiw	r24, 0x0e	; 14
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	9e bf       	out	0x3e, r25	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	8d bf       	out	0x3d, r24	; 61
     3d8:	80 81       	ld	r24, Z
     3da:	d8 12       	cpse	r13, r24
     3dc:	1e c0       	rjmp	.+60     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		 {
			 SET_BIT(PORTA,2); //Green for correct
     3de:	da 9a       	sbi	0x1b, 2	; 27
			 sprintf(buf, "CORRECT!");
     3e0:	89 e0       	ldi	r24, 0x09	; 9
     3e2:	e8 ee       	ldi	r30, 0xE8	; 232
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	d8 01       	movw	r26, r16
     3e8:	01 90       	ld	r0, Z+
     3ea:	0d 92       	st	X+, r0
     3ec:	8a 95       	dec	r24
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <compare_game_key+0xca>
			 pos_lcd(1, 0);
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
			 puts_lcd2(buf);
     3f8:	c8 01       	movw	r24, r16
     3fa:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
			 wait_avr2(50);
     3fe:	82 e3       	ldi	r24, 0x32	; 50
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 5b 00 	call	0xb6	; 0xb6 <wait_avr2>
			 num++;
     406:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <num>
     40a:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <num+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <num+0x1>
     414:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <num>
     418:	09 c0       	rjmp	.+18     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		 }
		 else if (key != 'Z')
     41a:	9a e5       	ldi	r25, 0x5A	; 90
     41c:	d9 16       	cp	r13, r25
     41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     420:	52 c0       	rjmp	.+164    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		 {
			SET_BIT(PORTA,1); //Red for wrong
     422:	d9 9a       	sbi	0x1b, 1	; 27
			wait_avr2(50);
     424:	82 e3       	ldi	r24, 0x32	; 50
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 5b 00 	call	0xb6	; 0xb6 <wait_avr2>
		 }

		// turn led off
		CLR_BIT(PORTA,1);
     42c:	d9 98       	cbi	0x1b, 1	; 27
		CLR_BIT(PORTA,2);
     42e:	da 98       	cbi	0x1b, 2	; 27

		if (key == '*') // EXIT
     430:	8a e2       	ldi	r24, 0x2A	; 42
     432:	d8 12       	cpse	r13, r24
     434:	44 c0       	rjmp	.+136    	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
		{
			num = 0;
     436:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <num+0x1>
     43a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <num>
			return true;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	45 c0       	rjmp	.+138    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		}

	 }
	 else if (num == size) // Completed The Song
     442:	2c 17       	cp	r18, r28
     444:	3d 07       	cpc	r19, r29
     446:	e9 f5       	brne	.+122    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	 {
		SET_BIT(PORTA,2); // green led on
     448:	da 9a       	sbi	0x1b, 2	; 27
		clr_lcd();
     44a:	0e 94 4e 03 	call	0x69c	; 0x69c <clr_lcd>
		sprintf(buf, "Completed Song %i", songNum);
     44e:	1f 93       	push	r17
     450:	0f 93       	push	r16
     452:	81 ef       	ldi	r24, 0xF1	; 241
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	8d e6       	ldi	r24, 0x6D	; 109
     45c:	93 e0       	ldi	r25, 0x03	; 3
     45e:	9f 93       	push	r25
     460:	8f 93       	push	r24
     462:	0e 94 3c 08 	call	0x1078	; 0x1078 <sprintf>
		pos_lcd(0, 0);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
		puts_lcd2(buf);
     46e:	8d e6       	ldi	r24, 0x6D	; 109
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
		wait_avr2(50);
     476:	82 e3       	ldi	r24, 0x32	; 50
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 5b 00 	call	0xb6	; 0xb6 <wait_avr2>
		
		 num = 0;
     47e:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <num+0x1>
     482:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <num>

		 if (songNum == 1) //<===================SONG ONE
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	01 30       	cpi	r16, 0x01	; 1
     494:	11 05       	cpc	r17, r1
     496:	39 f4       	brne	.+14     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		 {
			happyBirthday(FASTEST);
     498:	6d ec       	ldi	r22, 0xCD	; 205
     49a:	7c ec       	ldi	r23, 0xCC	; 204
     49c:	8c ec       	ldi	r24, 0xCC	; 204
     49e:	9d e3       	ldi	r25, 0x3D	; 61
     4a0:	0e 94 2d 06 	call	0xc5a	; 0xc5a <happyBirthday>
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		 }
		 else if (songNum == 2)//<===============SONG TWO
     4a6:	02 30       	cpi	r16, 0x02	; 2
     4a8:	11 05       	cpc	r17, r1
     4aa:	31 f4       	brne	.+12     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
		 {
			twinkleStarShort(FASTEST);
     4ac:	6d ec       	ldi	r22, 0xCD	; 205
     4ae:	7c ec       	ldi	r23, 0xCC	; 204
     4b0:	8c ec       	ldi	r24, 0xCC	; 204
     4b2:	9d e3       	ldi	r25, 0x3D	; 61
     4b4:	0e 94 53 06 	call	0xca6	; 0xca6 <twinkleStarShort>
		 }

		 CLR_BIT(PORTA,2); //led off
     4b8:	da 98       	cbi	0x1b, 2	; 27
		 return true;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	07 c0       	rjmp	.+14     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
	 }
	 
	 return false;
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
			SET_BIT(PORTA,1); //Red for wrong
			wait_avr2(50);
		 }

		// turn led off
		CLR_BIT(PORTA,1);
     4c6:	d9 98       	cbi	0x1b, 1	; 27
		CLR_BIT(PORTA,2);
     4c8:	da 98       	cbi	0x1b, 2	; 27

		 CLR_BIT(PORTA,2); //led off
		 return true;
	 }
	 
	 return false;
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	df 91       	pop	r29
     4ce:	cf 91       	pop	r28
     4d0:	1f 91       	pop	r17
     4d2:	0f 91       	pop	r16
     4d4:	ff 90       	pop	r15
     4d6:	ef 90       	pop	r14
     4d8:	df 90       	pop	r13
     4da:	08 95       	ret

000004dc <is_pressed>:
			if (is_pressed(r,c))
			return r * 4 + c + 1;
		}
	}
	return 0;
}
     4dc:	14 ba       	out	0x14, r1	; 20
     4de:	15 ba       	out	0x15, r1	; 21
     4e0:	95 b3       	in	r25, 0x15	; 21
     4e2:	6c 5f       	subi	r22, 0xFC	; 252
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	a9 01       	movw	r20, r18
     4ec:	06 2e       	mov	r0, r22
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <is_pressed+0x18>
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	0a 94       	dec	r0
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <is_pressed+0x14>
     4f8:	49 2b       	or	r20, r25
     4fa:	45 bb       	out	0x15, r20	; 21
     4fc:	94 b3       	in	r25, 0x14	; 20
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <is_pressed+0x28>
     500:	22 0f       	add	r18, r18
     502:	33 1f       	adc	r19, r19
     504:	8a 95       	dec	r24
     506:	e2 f7       	brpl	.-8      	; 0x500 <is_pressed+0x24>
     508:	92 2b       	or	r25, r18
     50a:	94 bb       	out	0x14, r25	; 20
     50c:	85 b3       	in	r24, 0x15	; 21
     50e:	20 95       	com	r18
     510:	28 23       	and	r18, r24
     512:	25 bb       	out	0x15, r18	; 21
     514:	23 b3       	in	r18, 0x13	; 19
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	02 c0       	rjmp	.+4      	; 0x51e <is_pressed+0x42>
     51a:	35 95       	asr	r19
     51c:	27 95       	ror	r18
     51e:	6a 95       	dec	r22
     520:	e2 f7       	brpl	.-8      	; 0x51a <is_pressed+0x3e>
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	20 ff       	sbrs	r18, 0
     528:	02 c0       	rjmp	.+4      	; 0x52e <is_pressed+0x52>
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	08 95       	ret

00000530 <get_key_value>:
unsigned int get_key_value()
{
     530:	af 92       	push	r10
     532:	bf 92       	push	r11
     534:	cf 92       	push	r12
     536:	df 92       	push	r13
     538:	ef 92       	push	r14
     53a:	ff 92       	push	r15
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char r;
	unsigned char c;
	// If A to D pressed
	for(r = 0; r < 4; ++r){
		if(is_pressed(r,3))
     548:	63 e0       	ldi	r22, 0x03	; 3
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	ce 01       	movw	r24, r28
     54e:	0e 94 6e 02 	call	0x4dc	; 0x4dc <is_pressed>
     552:	89 2b       	or	r24, r25
     554:	21 f0       	breq	.+8      	; 0x55e <get_key_value+0x2e>
		{
			return 65+r;
     556:	ce 01       	movw	r24, r28
     558:	8f 5b       	subi	r24, 0xBF	; 191
     55a:	9f 4f       	sbci	r25, 0xFF	; 255
     55c:	4d c0       	rjmp	.+154    	; 0x5f8 <get_key_value+0xc8>
     55e:	21 96       	adiw	r28, 0x01	; 1
unsigned int get_key_value()
{
	unsigned char r;
	unsigned char c;
	// If A to D pressed
	for(r = 0; r < 4; ++r){
     560:	c4 30       	cpi	r28, 0x04	; 4
     562:	d1 05       	cpc	r29, r1
     564:	89 f7       	brne	.-30     	; 0x548 <get_key_value+0x18>
     566:	a1 2c       	mov	r10, r1
     568:	b1 2c       	mov	r11, r1
     56a:	1e c0       	rjmp	.+60     	; 0x5a8 <get_key_value+0x78>
	}
	
	// 1 to 9 Pressed
	for(r = 0; r < 3; ++r){
		for(c = 0; c < 3; ++c){
			if(is_pressed(r,c)){
     56c:	0e 2d       	mov	r16, r14
     56e:	1f 2d       	mov	r17, r15
     570:	be 01       	movw	r22, r28
     572:	8e 2d       	mov	r24, r14
     574:	9f 2d       	mov	r25, r15
     576:	0e 94 6e 02 	call	0x4dc	; 0x4dc <is_pressed>
     57a:	89 2b       	or	r24, r25
     57c:	51 f0       	breq	.+20     	; 0x592 <get_key_value+0x62>
				return ((r*3)+c+1)+48;
     57e:	c8 01       	movw	r24, r16
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	08 0f       	add	r16, r24
     586:	19 1f       	adc	r17, r25
     588:	0c 0f       	add	r16, r28
     58a:	1d 1f       	adc	r17, r29
     58c:	c8 01       	movw	r24, r16
     58e:	c1 96       	adiw	r24, 0x31	; 49
     590:	33 c0       	rjmp	.+102    	; 0x5f8 <get_key_value+0xc8>
     592:	21 96       	adiw	r28, 0x01	; 1
		}
	}
	
	// 1 to 9 Pressed
	for(r = 0; r < 3; ++r){
		for(c = 0; c < 3; ++c){
     594:	c3 30       	cpi	r28, 0x03	; 3
     596:	d1 05       	cpc	r29, r1
     598:	49 f7       	brne	.-46     	; 0x56c <get_key_value+0x3c>
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	a8 1a       	sub	r10, r24
     59e:	b8 0a       	sbc	r11, r24
			return 65+r;
		}
	}
	
	// 1 to 9 Pressed
	for(r = 0; r < 3; ++r){
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	a8 16       	cp	r10, r24
     5a4:	b1 04       	cpc	r11, r1
     5a6:	29 f0       	breq	.+10     	; 0x5b2 <get_key_value+0x82>
		}
	}
	return 0;
}
unsigned int get_key_value()
{
     5a8:	c0 e0       	ldi	r28, 0x00	; 0
     5aa:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	// 1 to 9 Pressed
	for(r = 0; r < 3; ++r){
		for(c = 0; c < 3; ++c){
			if(is_pressed(r,c)){
     5ac:	ea 2c       	mov	r14, r10
     5ae:	fb 2c       	mov	r15, r11
     5b0:	dd cf       	rjmp	.-70     	; 0x56c <get_key_value+0x3c>
				return ((r*3)+c+1)+48;
			}
		}
	}
	//If zero pressed
	if(is_pressed(3,1)){
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	83 e0       	ldi	r24, 0x03	; 3
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 6e 02 	call	0x4dc	; 0x4dc <is_pressed>
     5be:	89 2b       	or	r24, r25
     5c0:	99 f4       	brne	.+38     	; 0x5e8 <get_key_value+0xb8>
		return '0';
	}
	// If * pressed
	else if(is_pressed(3,0)){
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 6e 02 	call	0x4dc	; 0x4dc <is_pressed>
     5ce:	89 2b       	or	r24, r25
     5d0:	71 f4       	brne	.+28     	; 0x5ee <get_key_value+0xbe>
		return '*';
	}
	// If # pressed
	else if(is_pressed(3,2)){
     5d2:	62 e0       	ldi	r22, 0x02	; 2
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 6e 02 	call	0x4dc	; 0x4dc <is_pressed>
     5de:	89 2b       	or	r24, r25
     5e0:	49 f4       	brne	.+18     	; 0x5f4 <get_key_value+0xc4>
		return '#';
	}
	//otherwise just return some random char for not pressed
	return 'Z';
     5e2:	8a e5       	ldi	r24, 0x5A	; 90
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <get_key_value+0xc8>
			}
		}
	}
	//If zero pressed
	if(is_pressed(3,1)){
		return '0';
     5e8:	80 e3       	ldi	r24, 0x30	; 48
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <get_key_value+0xc8>
	}
	// If * pressed
	else if(is_pressed(3,0)){
		return '*';
     5ee:	8a e2       	ldi	r24, 0x2A	; 42
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <get_key_value+0xc8>
	}
	// If # pressed
	else if(is_pressed(3,2)){
		return '#';
     5f4:	83 e2       	ldi	r24, 0x23	; 35
     5f6:	90 e0       	ldi	r25, 0x00	; 0
	}
	//otherwise just return some random char for not pressed
	return 'Z';
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	bf 90       	pop	r11
     60a:	af 90       	pop	r10
     60c:	08 95       	ret

0000060e <output>:
{
  char c;
  while ((c = pgm_read_byte(s++)) != 0) {
    write(c, 1);
  }
}
     60e:	66 23       	and	r22, r22
     610:	11 f0       	breq	.+4      	; 0x616 <output+0x8>
     612:	c0 9a       	sbi	0x18, 0	; 24
     614:	01 c0       	rjmp	.+2      	; 0x618 <output+0xa>
     616:	c0 98       	cbi	0x18, 0	; 24
     618:	c1 98       	cbi	0x18, 1	; 24
     61a:	82 bb       	out	0x12, r24	; 18
     61c:	8f ef       	ldi	r24, 0xFF	; 255
     61e:	81 bb       	out	0x11, r24	; 17
     620:	c2 9a       	sbi	0x18, 2	; 24
     622:	00 00       	nop
     624:	00 00       	nop
     626:	00 00       	nop
     628:	c2 98       	cbi	0x18, 2	; 24
     62a:	08 95       	ret

0000062c <write>:
     62c:	c0 98       	cbi	0x18, 0	; 24
     62e:	c1 9a       	sbi	0x18, 1	; 24
     630:	11 ba       	out	0x11, r1	; 17
     632:	90 b3       	in	r25, 0x10	; 16
     634:	c2 9a       	sbi	0x18, 2	; 24
     636:	00 00       	nop
     638:	00 00       	nop
     63a:	00 00       	nop
     63c:	11 ba       	out	0x11, r1	; 17
     63e:	90 b3       	in	r25, 0x10	; 16
     640:	c2 98       	cbi	0x18, 2	; 24
     642:	99 23       	and	r25, r25
     644:	9c f3       	brlt	.-26     	; 0x62c <write>
     646:	0e 94 07 03 	call	0x60e	; 0x60e <output>
     64a:	08 95       	ret

0000064c <ini_lcd>:
     64c:	b8 9a       	sbi	0x17, 0	; 23
     64e:	b9 9a       	sbi	0x17, 1	; 23
     650:	ba 9a       	sbi	0x17, 2	; 23
     652:	80 e1       	ldi	r24, 0x10	; 16
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	80 e3       	ldi	r24, 0x30	; 48
     65e:	0e 94 07 03 	call	0x60e	; 0x60e <output>
     662:	85 e0       	ldi	r24, 0x05	; 5
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	0e 94 07 03 	call	0x60e	; 0x60e <output>
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	8c e3       	ldi	r24, 0x3C	; 60
     67e:	0e 94 16 03 	call	0x62c	; 0x62c <write>
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	8c e0       	ldi	r24, 0x0C	; 12
     686:	0e 94 16 03 	call	0x62c	; 0x62c <write>
     68a:	60 e0       	ldi	r22, 0x00	; 0
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	0e 94 16 03 	call	0x62c	; 0x62c <write>
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 16 03 	call	0x62c	; 0x62c <write>
     69a:	08 95       	ret

0000069c <clr_lcd>:
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	0e 94 16 03 	call	0x62c	; 0x62c <write>
     6a4:	08 95       	ret

000006a6 <pos_lcd>:
     6a6:	cf 93       	push	r28
     6a8:	c6 2f       	mov	r28, r22
     6aa:	98 e2       	ldi	r25, 0x28	; 40
     6ac:	89 9f       	mul	r24, r25
     6ae:	c0 0d       	add	r28, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	0e 94 16 03 	call	0x62c	; 0x62c <write>
     6ba:	cc 23       	and	r28, r28
     6bc:	31 f0       	breq	.+12     	; 0x6ca <pos_lcd+0x24>
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	84 e1       	ldi	r24, 0x14	; 20
     6c2:	0e 94 16 03 	call	0x62c	; 0x62c <write>
     6c6:	c1 50       	subi	r28, 0x01	; 1
     6c8:	d1 f7       	brne	.-12     	; 0x6be <pos_lcd+0x18>
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <puts_lcd2>:

void
puts_lcd2(const char *s)
{
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
  char c;
  while ((c = *(s++)) != 0) {
     6d2:	ec 01       	movw	r28, r24
     6d4:	21 96       	adiw	r28, 0x01	; 1
     6d6:	fc 01       	movw	r30, r24
     6d8:	80 81       	ld	r24, Z
     6da:	88 23       	and	r24, r24
     6dc:	31 f0       	breq	.+12     	; 0x6ea <puts_lcd2+0x1c>
    write(c, 1);
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	0e 94 16 03 	call	0x62c	; 0x62c <write>

void
puts_lcd2(const char *s)
{
  char c;
  while ((c = *(s++)) != 0) {
     6e4:	89 91       	ld	r24, Y+
     6e6:	81 11       	cpse	r24, r1
     6e8:	fa cf       	rjmp	.-12     	; 0x6de <puts_lcd2+0x10>
    write(c, 1);
  }
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <convert_charArray_to_struct>:
}
void junkie()
{
	sprintf(buf, "DDDD");
	pos_lcd(0, 0);
	puts_lcd2(buf);
     6f0:	5f 92       	push	r5
     6f2:	6f 92       	push	r6
     6f4:	7f 92       	push	r7
     6f6:	8f 92       	push	r8
     6f8:	9f 92       	push	r9
     6fa:	af 92       	push	r10
     6fc:	bf 92       	push	r11
     6fe:	cf 92       	push	r12
     700:	df 92       	push	r13
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	0f 93       	push	r16
     708:	1f 93       	push	r17
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	16 16       	cp	r1, r22
     710:	17 06       	cpc	r1, r23
     712:	0c f0       	brlt	.+2      	; 0x716 <convert_charArray_to_struct+0x26>
     714:	64 c0       	rjmp	.+200    	; 0x7de <convert_charArray_to_struct+0xee>
     716:	a8 2f       	mov	r26, r24
     718:	b9 2f       	mov	r27, r25
     71a:	e5 ea       	ldi	r30, 0xA5	; 165
     71c:	f2 e0       	ldi	r31, 0x02	; 2
     71e:	66 0f       	add	r22, r22
     720:	77 1f       	adc	r23, r23
     722:	66 0f       	add	r22, r22
     724:	77 1f       	adc	r23, r23
     726:	6b 55       	subi	r22, 0x5B	; 91
     728:	7d 4f       	sbci	r23, 0xFD	; 253
     72a:	c6 e0       	ldi	r28, 0x06	; 6
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	16 e2       	ldi	r17, 0x26	; 38
     730:	d1 e0       	ldi	r29, 0x01	; 1
     732:	0f 2e       	mov	r0, r31
     734:	fa e4       	ldi	r31, 0x4A	; 74
     736:	ff 2e       	mov	r15, r31
     738:	f0 2d       	mov	r31, r0
     73a:	01 e0       	ldi	r16, 0x01	; 1
     73c:	0f 2e       	mov	r0, r31
     73e:	fd e5       	ldi	r31, 0x5D	; 93
     740:	df 2e       	mov	r13, r31
     742:	f0 2d       	mov	r31, r0
     744:	ee 24       	eor	r14, r14
     746:	e3 94       	inc	r14
     748:	0f 2e       	mov	r0, r31
     74a:	f8 e8       	ldi	r31, 0x88	; 136
     74c:	bf 2e       	mov	r11, r31
     74e:	f0 2d       	mov	r31, r0
     750:	cc 24       	eor	r12, r12
     752:	c3 94       	inc	r12
     754:	0f 2e       	mov	r0, r31
     756:	f8 eb       	ldi	r31, 0xB8	; 184
     758:	9f 2e       	mov	r9, r31
     75a:	f0 2d       	mov	r31, r0
     75c:	aa 24       	eor	r10, r10
     75e:	a3 94       	inc	r10
     760:	0f 2e       	mov	r0, r31
     762:	fe ee       	ldi	r31, 0xEE	; 238
     764:	7f 2e       	mov	r7, r31
     766:	f0 2d       	mov	r31, r0
     768:	88 24       	eor	r8, r8
     76a:	83 94       	inc	r8
     76c:	0f 2e       	mov	r0, r31
     76e:	fb e0       	ldi	r31, 0x0B	; 11
     770:	5f 2e       	mov	r5, r31
     772:	f0 2d       	mov	r31, r0
     774:	68 94       	set
     776:	66 24       	eor	r6, r6
     778:	61 f8       	bld	r6, 1
     77a:	41 e0       	ldi	r20, 0x01	; 1
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	8d 91       	ld	r24, X+
     780:	81 33       	cpi	r24, 0x31	; 49
     782:	89 f0       	breq	.+34     	; 0x7a6 <convert_charArray_to_struct+0xb6>
     784:	82 33       	cpi	r24, 0x32	; 50
     786:	91 f0       	breq	.+36     	; 0x7ac <convert_charArray_to_struct+0xbc>
     788:	83 33       	cpi	r24, 0x33	; 51
     78a:	99 f0       	breq	.+38     	; 0x7b2 <convert_charArray_to_struct+0xc2>
     78c:	84 33       	cpi	r24, 0x34	; 52
     78e:	a1 f0       	breq	.+40     	; 0x7b8 <convert_charArray_to_struct+0xc8>
     790:	85 33       	cpi	r24, 0x35	; 53
     792:	a9 f0       	breq	.+42     	; 0x7be <convert_charArray_to_struct+0xce>
     794:	86 33       	cpi	r24, 0x36	; 54
     796:	b1 f0       	breq	.+44     	; 0x7c4 <convert_charArray_to_struct+0xd4>
     798:	87 33       	cpi	r24, 0x37	; 55
     79a:	b9 f0       	breq	.+46     	; 0x7ca <convert_charArray_to_struct+0xda>
     79c:	88 33       	cpi	r24, 0x38	; 56
     79e:	b9 f4       	brne	.+46     	; 0x7ce <convert_charArray_to_struct+0xde>
     7a0:	25 2d       	mov	r18, r5
     7a2:	36 2d       	mov	r19, r6
     7a4:	14 c0       	rjmp	.+40     	; 0x7ce <convert_charArray_to_struct+0xde>
     7a6:	2c 2f       	mov	r18, r28
     7a8:	39 2f       	mov	r19, r25
     7aa:	11 c0       	rjmp	.+34     	; 0x7ce <convert_charArray_to_struct+0xde>
     7ac:	21 2f       	mov	r18, r17
     7ae:	3d 2f       	mov	r19, r29
     7b0:	0e c0       	rjmp	.+28     	; 0x7ce <convert_charArray_to_struct+0xde>
     7b2:	2f 2d       	mov	r18, r15
     7b4:	30 2f       	mov	r19, r16
     7b6:	0b c0       	rjmp	.+22     	; 0x7ce <convert_charArray_to_struct+0xde>
     7b8:	2d 2d       	mov	r18, r13
     7ba:	3e 2d       	mov	r19, r14
     7bc:	08 c0       	rjmp	.+16     	; 0x7ce <convert_charArray_to_struct+0xde>
     7be:	2b 2d       	mov	r18, r11
     7c0:	3c 2d       	mov	r19, r12
     7c2:	05 c0       	rjmp	.+10     	; 0x7ce <convert_charArray_to_struct+0xde>
     7c4:	29 2d       	mov	r18, r9
     7c6:	3a 2d       	mov	r19, r10
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <convert_charArray_to_struct+0xde>
     7ca:	27 2d       	mov	r18, r7
     7cc:	38 2d       	mov	r19, r8
     7ce:	20 83       	st	Z, r18
     7d0:	31 83       	std	Z+1, r19	; 0x01
     7d2:	53 83       	std	Z+3, r21	; 0x03
     7d4:	42 83       	std	Z+2, r20	; 0x02
     7d6:	34 96       	adiw	r30, 0x04	; 4
     7d8:	e6 17       	cp	r30, r22
     7da:	f7 07       	cpc	r31, r23
     7dc:	81 f6       	brne	.-96     	; 0x77e <convert_charArray_to_struct+0x8e>
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	1f 91       	pop	r17
     7e4:	0f 91       	pop	r16
     7e6:	ff 90       	pop	r15
     7e8:	ef 90       	pop	r14
     7ea:	df 90       	pop	r13
     7ec:	cf 90       	pop	r12
     7ee:	bf 90       	pop	r11
     7f0:	af 90       	pop	r10
     7f2:	9f 90       	pop	r9
     7f4:	8f 90       	pop	r8
     7f6:	7f 90       	pop	r7
     7f8:	6f 90       	pop	r6
     7fa:	5f 90       	pop	r5
     7fc:	08 95       	ret

000007fe <instant_playback_visual_note>:
     7fe:	8f 92       	push	r8
     800:	9f 92       	push	r9
     802:	af 92       	push	r10
     804:	bf 92       	push	r11
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	d8 2f       	mov	r29, r24
     818:	c9 2f       	mov	r28, r25
     81a:	4b 01       	movw	r8, r22
     81c:	0e 94 4e 03 	call	0x69c	; 0x69c <clr_lcd>
     820:	18 14       	cp	r1, r8
     822:	19 04       	cpc	r1, r9
     824:	f4 f5       	brge	.+124    	; 0x8a2 <__stack+0x43>
     826:	cd 2e       	mov	r12, r29
     828:	dc 2e       	mov	r13, r28
     82a:	0f 2e       	mov	r0, r31
     82c:	f5 ea       	ldi	r31, 0xA5	; 165
     82e:	ef 2e       	mov	r14, r31
     830:	f2 e0       	ldi	r31, 0x02	; 2
     832:	ff 2e       	mov	r15, r31
     834:	f0 2d       	mov	r31, r0
     836:	c0 e0       	ldi	r28, 0x00	; 0
     838:	d0 e0       	ldi	r29, 0x00	; 0
     83a:	0f 2e       	mov	r0, r31
     83c:	f3 e0       	ldi	r31, 0x03	; 3
     83e:	af 2e       	mov	r10, r31
     840:	f2 e0       	ldi	r31, 0x02	; 2
     842:	bf 2e       	mov	r11, r31
     844:	f0 2d       	mov	r31, r0
     846:	0d e6       	ldi	r16, 0x6D	; 109
     848:	13 e0       	ldi	r17, 0x03	; 3
     84a:	21 96       	adiw	r28, 0x01	; 1
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	bf 92       	push	r11
     852:	af 92       	push	r10
     854:	1f 93       	push	r17
     856:	0f 93       	push	r16
     858:	0e 94 3c 08 	call	0x1078	; 0x1078 <sprintf>
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
     864:	c8 01       	movw	r24, r16
     866:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
     86a:	f6 01       	movw	r30, r12
     86c:	81 91       	ld	r24, Z+
     86e:	6f 01       	movw	r12, r30
     870:	0e 94 6d 00 	call	0xda	; 0xda <test_key>
     874:	2a e9       	ldi	r18, 0x9A	; 154
     876:	39 e9       	ldi	r19, 0x99	; 153
     878:	49 e9       	ldi	r20, 0x99	; 153
     87a:	5e e3       	ldi	r21, 0x3E	; 62
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	f7 01       	movw	r30, r14
     882:	80 81       	ld	r24, Z
     884:	91 81       	ldd	r25, Z+1	; 0x01
     886:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	ef 0e       	add	r14, r31
     88e:	f1 1c       	adc	r15, r1
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	8c 16       	cp	r8, r28
     89e:	9d 06       	cpc	r9, r29
     8a0:	a1 f6       	brne	.-88     	; 0x84a <instant_playback_visual_note+0x4c>
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	1f 91       	pop	r17
     8a8:	0f 91       	pop	r16
     8aa:	ff 90       	pop	r15
     8ac:	ef 90       	pop	r14
     8ae:	df 90       	pop	r13
     8b0:	cf 90       	pop	r12
     8b2:	bf 90       	pop	r11
     8b4:	af 90       	pop	r10
     8b6:	9f 90       	pop	r9
     8b8:	8f 90       	pop	r8
     8ba:	08 95       	ret

000008bc <mainMenu>:
     8bc:	0e 94 4e 03 	call	0x69c	; 0x69c <clr_lcd>
     8c0:	81 e1       	ldi	r24, 0x11	; 17
     8c2:	e1 e1       	ldi	r30, 0x11	; 17
     8c4:	f2 e0       	ldi	r31, 0x02	; 2
     8c6:	ad e6       	ldi	r26, 0x6D	; 109
     8c8:	b3 e0       	ldi	r27, 0x03	; 3
     8ca:	01 90       	ld	r0, Z+
     8cc:	0d 92       	st	X+, r0
     8ce:	8a 95       	dec	r24
     8d0:	e1 f7       	brne	.-8      	; 0x8ca <mainMenu+0xe>
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
     8da:	8d e6       	ldi	r24, 0x6D	; 109
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
     8e2:	81 e1       	ldi	r24, 0x11	; 17
     8e4:	e2 e2       	ldi	r30, 0x22	; 34
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	ad e6       	ldi	r26, 0x6D	; 109
     8ea:	b3 e0       	ldi	r27, 0x03	; 3
     8ec:	01 90       	ld	r0, Z+
     8ee:	0d 92       	st	X+, r0
     8f0:	8a 95       	dec	r24
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <mainMenu+0x30>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
     8fc:	8d e6       	ldi	r24, 0x6D	; 109
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
     904:	08 95       	ret

00000906 <main>:
}
/****************************************/


int main(void)
{
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
     90e:	a7 97       	sbiw	r28, 0x27	; 39
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
	ini_lcd();
     91a:	0e 94 26 03 	call	0x64c	; 0x64c <ini_lcd>
	init_speaker();
     91e:	0e 94 82 05 	call	0xb04	; 0xb04 <init_speaker>
	SET_BIT(DDRA,1); // RED LED
     922:	d1 9a       	sbi	0x1a, 1	; 26
	SET_BIT(DDRA,2); // GREEN LED
     924:	d2 9a       	sbi	0x1a, 2	; 26
		'1', '2', '5'
	};
	char testSong2[5] = {
		'4', '3', '5', '6' ,'7'
	};
	char gameSongHappyBDay[25] = {
     926:	89 e1       	ldi	r24, 0x19	; 25
     928:	e0 e6       	ldi	r30, 0x60	; 96
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	de 01       	movw	r26, r28
     92e:	11 96       	adiw	r26, 0x01	; 1
     930:	01 90       	ld	r0, Z+
     932:	0d 92       	st	X+, r0
     934:	8a 95       	dec	r24
     936:	e1 f7       	brne	.-8      	; 0x930 <main+0x2a>
		'1', '1', '5', '5', '6', '6', '5', '4', '4', '3', '3', '2', '2', '1',
		'5', '5', '4', '4', '3', '3', '2',
		'5', '5', '4', '4', '3', '3', '2',
		'1', '1', '5', '5', '6', '6', '5', '4', '4', '3', '3', '2', '2', '1'
	};
	char gameSongTwinkleShort[14] = {
     938:	8e e0       	ldi	r24, 0x0E	; 14
     93a:	e9 e7       	ldi	r30, 0x79	; 121
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	de 01       	movw	r26, r28
     940:	5a 96       	adiw	r26, 0x1a	; 26
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	8a 95       	dec	r24
     948:	e1 f7       	brne	.-8      	; 0x942 <main+0x3c>
	};
	//**********************************************************

	
	
	mainMenu();
     94a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <mainMenu>
	while(1)
	{	
		key = get_key_value();
		bool isDone = false;
     94e:	10 e0       	ldi	r17, 0x00	; 0
}
/****************************************/


int main(void)
{
     950:	01 e0       	ldi	r16, 0x01	; 1
	
	
	mainMenu();
	while(1)
	{	
		key = get_key_value();
     952:	0e 94 98 02 	call	0x530	; 0x530 <get_key_value>
     956:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <key>
		bool isDone = false;
     95a:	f1 2e       	mov	r15, r17
		bool offMainMenu = false;

		while( key != 'Z' && !offMainMenu)
     95c:	aa c0       	rjmp	.+340    	; 0xab2 <main+0x1ac>
		{		
			if (key == 'A')
     95e:	81 34       	cpi	r24, 0x41	; 65
     960:	69 f4       	brne	.+26     	; 0x97c <main+0x76>
			{
				offMainMenu = true;
				while (offMainMenu)
				{
					while (!isDone)
     962:	f1 10       	cpse	r15, r1
     964:	ac c0       	rjmp	.+344    	; 0xabe <main+0x1b8>
					{
						isDone = compare_game_key(gameSongHappyBDay, 25, 1); // SONG ONE
     966:	41 e0       	ldi	r20, 0x01	; 1
     968:	50 e0       	ldi	r21, 0x00	; 0
     96a:	69 e1       	ldi	r22, 0x19	; 25
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	0e 94 8f 01 	call	0x31e	; 0x31e <compare_game_key>
			if (key == 'A')
			{
				offMainMenu = true;
				while (offMainMenu)
				{
					while (!isDone)
     976:	88 23       	and	r24, r24
     978:	b1 f3       	breq	.-20     	; 0x966 <main+0x60>
     97a:	a1 c0       	rjmp	.+322    	; 0xabe <main+0x1b8>
						offMainMenu = false;
						mainMenu();
					}
				}
			}
			else if (key == 'B')
     97c:	82 34       	cpi	r24, 0x42	; 66
     97e:	79 f4       	brne	.+30     	; 0x99e <main+0x98>
     980:	0b c0       	rjmp	.+22     	; 0x998 <main+0x92>
				offMainMenu = true;
				while (offMainMenu)
				{
					while (!isDone)
					{
						isDone = compare_game_key(gameSongTwinkleShort, 14, 2); // SONG TWO
     982:	42 e0       	ldi	r20, 0x02	; 2
     984:	50 e0       	ldi	r21, 0x00	; 0
     986:	6e e0       	ldi	r22, 0x0E	; 14
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	ce 01       	movw	r24, r28
     98c:	4a 96       	adiw	r24, 0x1a	; 26
     98e:	0e 94 8f 01 	call	0x31e	; 0x31e <compare_game_key>
			else if (key == 'B')
			{
				offMainMenu = true;
				while (offMainMenu)
				{
					while (!isDone)
     992:	88 23       	and	r24, r24
     994:	b1 f3       	breq	.-20     	; 0x982 <main+0x7c>
     996:	96 c0       	rjmp	.+300    	; 0xac4 <main+0x1be>
     998:	f1 10       	cpse	r15, r1
     99a:	94 c0       	rjmp	.+296    	; 0xac4 <main+0x1be>
     99c:	f2 cf       	rjmp	.-28     	; 0x982 <main+0x7c>
						offMainMenu = false;
						mainMenu();
					}
				}
			}
			else if (key == 'C') // RECORD A NEW SONG
     99e:	83 34       	cpi	r24, 0x43	; 67
     9a0:	79 f4       	brne	.+30     	; 0x9c0 <main+0xba>
     9a2:	0b c0       	rjmp	.+22     	; 0x9ba <main+0xb4>
				offMainMenu = true;
				while (offMainMenu)
				{
					while (!isDone)
					{
						SET_BIT(PORTA, 1); //RED for recording
     9a4:	d9 9a       	sbi	0x1b, 1	; 27
						isDone = recordSong(recording, 50); //50 note song
     9a6:	62 e3       	ldi	r22, 0x32	; 50
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	82 e7       	ldi	r24, 0x72	; 114
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	0e 94 1e 01 	call	0x23c	; 0x23c <recordSong>
						CLR_BIT(PORTA, 1);
     9b2:	d9 98       	cbi	0x1b, 1	; 27
			else if (key == 'C') // RECORD A NEW SONG
			{
				offMainMenu = true;
				while (offMainMenu)
				{
					while (!isDone)
     9b4:	88 23       	and	r24, r24
     9b6:	b1 f3       	breq	.-20     	; 0x9a4 <main+0x9e>
     9b8:	88 c0       	rjmp	.+272    	; 0xaca <main+0x1c4>
     9ba:	ff 20       	and	r15, r15
     9bc:	99 f3       	breq	.-26     	; 0x9a4 <main+0x9e>
     9be:	85 c0       	rjmp	.+266    	; 0xaca <main+0x1c4>
						offMainMenu = false;
						mainMenu();
					}
				}
			}
			else if (key == 'D') // PLAY
     9c0:	84 34       	cpi	r24, 0x44	; 68
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <main+0xc0>
     9c4:	6c c0       	rjmp	.+216    	; 0xa9e <main+0x198>
			{
				clr_lcd();
     9c6:	0e 94 4e 03 	call	0x69c	; 0x69c <clr_lcd>

				offMainMenu = true;
				while (offMainMenu)
				{
					while (!isDone)
     9ca:	f1 10       	cpse	r15, r1
     9cc:	61 c0       	rjmp	.+194    	; 0xa90 <main+0x18a>
					{
						key = get_key_value();
     9ce:	0e 94 98 02 	call	0x530	; 0x530 <get_key_value>
     9d2:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <key>
						if (sizeOfSong == 0) // if no song was recorded
     9d6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     9da:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <__data_end+0x1>
     9de:	00 97       	sbiw	r24, 0x00	; 0
     9e0:	19 f5       	brne	.+70     	; 0xa28 <main+0x122>
						{
							sprintf(buf, "No song to play");
     9e2:	80 e1       	ldi	r24, 0x10	; 16
     9e4:	e8 e3       	ldi	r30, 0x38	; 56
     9e6:	f2 e0       	ldi	r31, 0x02	; 2
     9e8:	ad e6       	ldi	r26, 0x6D	; 109
     9ea:	b3 e0       	ldi	r27, 0x03	; 3
     9ec:	01 90       	ld	r0, Z+
     9ee:	0d 92       	st	X+, r0
     9f0:	8a 95       	dec	r24
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <main+0xe6>
							pos_lcd(0, 0);
     9f4:	61 2f       	mov	r22, r17
     9f6:	81 2f       	mov	r24, r17
     9f8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
							puts_lcd2(buf);
     9fc:	8d e6       	ldi	r24, 0x6D	; 109
     9fe:	93 e0       	ldi	r25, 0x03	; 3
     a00:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
							sprintf(buf, "press * to exit");
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	e8 e4       	ldi	r30, 0x48	; 72
     a08:	f2 e0       	ldi	r31, 0x02	; 2
     a0a:	ad e6       	ldi	r26, 0x6D	; 109
     a0c:	b3 e0       	ldi	r27, 0x03	; 3
     a0e:	01 90       	ld	r0, Z+
     a10:	0d 92       	st	X+, r0
     a12:	8a 95       	dec	r24
     a14:	e1 f7       	brne	.-8      	; 0xa0e <main+0x108>
							pos_lcd(1, 0);
     a16:	61 2f       	mov	r22, r17
     a18:	80 2f       	mov	r24, r16
     a1a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
							puts_lcd2(buf);
     a1e:	8d e6       	ldi	r24, 0x6D	; 109
     a20:	93 e0       	ldi	r25, 0x03	; 3
     a22:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
     a26:	66 c0       	rjmp	.+204    	; 0xaf4 <main+0x1ee>
						}
						else if (sizeOfSong > 0)
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	0c f0       	brlt	.+2      	; 0xa30 <main+0x12a>
     a2e:	62 c0       	rjmp	.+196    	; 0xaf4 <main+0x1ee>
						{
							sprintf(buf, "Playing");
     a30:	88 e0       	ldi	r24, 0x08	; 8
     a32:	e8 e5       	ldi	r30, 0x58	; 88
     a34:	f2 e0       	ldi	r31, 0x02	; 2
     a36:	ad e6       	ldi	r26, 0x6D	; 109
     a38:	b3 e0       	ldi	r27, 0x03	; 3
     a3a:	01 90       	ld	r0, Z+
     a3c:	0d 92       	st	X+, r0
     a3e:	8a 95       	dec	r24
     a40:	e1 f7       	brne	.-8      	; 0xa3a <main+0x134>
							pos_lcd(0, 0);
     a42:	61 2f       	mov	r22, r17
     a44:	81 2f       	mov	r24, r17
     a46:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
							puts_lcd2(buf);
     a4a:	8d e6       	ldi	r24, 0x6D	; 109
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
							sprintf(buf, "your song...");
     a52:	8d e0       	ldi	r24, 0x0D	; 13
     a54:	e0 e6       	ldi	r30, 0x60	; 96
     a56:	f2 e0       	ldi	r31, 0x02	; 2
     a58:	ad e6       	ldi	r26, 0x6D	; 109
     a5a:	b3 e0       	ldi	r27, 0x03	; 3
     a5c:	01 90       	ld	r0, Z+
     a5e:	0d 92       	st	X+, r0
     a60:	8a 95       	dec	r24
     a62:	e1 f7       	brne	.-8      	; 0xa5c <main+0x156>
							pos_lcd(1, 0);
     a64:	61 2f       	mov	r22, r17
     a66:	80 2f       	mov	r24, r16
     a68:	0e 94 53 03 	call	0x6a6	; 0x6a6 <pos_lcd>
							puts_lcd2(buf);
     a6c:	8d e6       	ldi	r24, 0x6D	; 109
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	0e 94 67 03 	call	0x6ce	; 0x6ce <puts_lcd2>
							SET_BIT(PORTA, 2); //GREEN for playback
     a74:	da 9a       	sbi	0x1b, 2	; 27
							play_music2(aNewSong, sizeOfSong, FASTER);
     a76:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <__data_end>
     a7a:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <__data_end+0x1>
     a7e:	2a e9       	ldi	r18, 0x9A	; 154
     a80:	39 e9       	ldi	r19, 0x99	; 153
     a82:	49 e9       	ldi	r20, 0x99	; 153
     a84:	5e e3       	ldi	r21, 0x3E	; 62
     a86:	85 ea       	ldi	r24, 0xA5	; 165
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <play_music2>
							CLR_BIT(PORTA, 2);
     a8e:	da 98       	cbi	0x1b, 2	; 27
						}
					}
					if (isDone)
					{
						offMainMenu = false;
						mainMenu();
     a90:	0e 94 5e 04 	call	0x8bc	; 0x8bc <mainMenu>
						key = get_key_value();
     a94:	0e 94 98 02 	call	0x530	; 0x530 <get_key_value>
     a98:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <key>
     a9c:	31 c0       	rjmp	.+98     	; 0xb00 <main+0x1fa>
					}
				}
			}
			else // on main menu, when press any other button, it should stay on main menu
			{
				key = get_key_value();
     a9e:	0e 94 98 02 	call	0x530	; 0x530 <get_key_value>
     aa2:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <key>
			}

			if (!isDone) // this is for when we use '*' to return to main menu
     aa6:	f1 10       	cpse	r15, r1
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <main+0x1ac>
			{
				key = get_key_value();
     aaa:	0e 94 98 02 	call	0x530	; 0x530 <get_key_value>
     aae:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <key>
	{	
		key = get_key_value();
		bool isDone = false;
		bool offMainMenu = false;

		while( key != 'Z' && !offMainMenu)
     ab2:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     ab6:	8a 35       	cpi	r24, 0x5A	; 90
     ab8:	09 f0       	breq	.+2      	; 0xabc <main+0x1b6>
     aba:	51 cf       	rjmp	.-350    	; 0x95e <main+0x58>
     abc:	4a cf       	rjmp	.-364    	; 0x952 <main+0x4c>
						isDone = compare_game_key(gameSongHappyBDay, 25, 1); // SONG ONE
					}
					if (isDone)
					{
						offMainMenu = false;
						mainMenu();
     abe:	0e 94 5e 04 	call	0x8bc	; 0x8bc <mainMenu>
     ac2:	1e c0       	rjmp	.+60     	; 0xb00 <main+0x1fa>
						isDone = compare_game_key(gameSongTwinkleShort, 14, 2); // SONG TWO
					}
					if (isDone)
					{
						offMainMenu = false;
						mainMenu();
     ac4:	0e 94 5e 04 	call	0x8bc	; 0x8bc <mainMenu>
     ac8:	1b c0       	rjmp	.+54     	; 0xb00 <main+0x1fa>
						isDone = recordSong(recording, 50); //50 note song
						CLR_BIT(PORTA, 1);
					}
					if (isDone)
					{
						convert_charArray_to_struct(recording, sizeOfSong); // convert to struct to play later
     aca:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <__data_end>
     ace:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <__data_end+0x1>
     ad2:	82 e7       	ldi	r24, 0x72	; 114
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <convert_charArray_to_struct>

						SET_BIT(PORTA, 2); //GREEN for playback
     ada:	da 9a       	sbi	0x1b, 2	; 27
						instant_playback_visual_note(recording, sizeOfSong); // display note playing
     adc:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <__data_end>
     ae0:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <__data_end+0x1>
     ae4:	82 e7       	ldi	r24, 0x72	; 114
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <instant_playback_visual_note>
						CLR_BIT(PORTA, 2);
     aec:	da 98       	cbi	0x1b, 2	; 27
						offMainMenu = false;
						mainMenu();
     aee:	0e 94 5e 04 	call	0x8bc	; 0x8bc <mainMenu>
     af2:	06 c0       	rjmp	.+12     	; 0xb00 <main+0x1fa>
							SET_BIT(PORTA, 2); //GREEN for playback
							play_music2(aNewSong, sizeOfSong, FASTER);
							CLR_BIT(PORTA, 2);
							isDone = true;
						}
						if (key == '*') //back to menu
     af4:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <key>
     af8:	8a 32       	cpi	r24, 0x2A	; 42
     afa:	09 f0       	breq	.+2      	; 0xafe <main+0x1f8>
     afc:	68 cf       	rjmp	.-304    	; 0x9ce <main+0xc8>
     afe:	c8 cf       	rjmp	.-112    	; 0xa90 <main+0x18a>
}
/****************************************/


int main(void)
{
     b00:	f0 2e       	mov	r15, r16
     b02:	d7 cf       	rjmp	.-82     	; 0xab2 <main+0x1ac>

00000b04 <init_speaker>:
		 { D4, 1  },
		 { D4, 1  },
		 { C4, 3  }
	 };
	 play_music2(song, 42, speed); //has 42 notes
 } 
     b04:	d0 9a       	sbi	0x1a, 0	; 26
     b06:	d8 9a       	sbi	0x1b, 0	; 27
     b08:	08 95       	ret

00000b0a <play_note2>:
     b0a:	4f 92       	push	r4
     b0c:	5f 92       	push	r5
     b0e:	6f 92       	push	r6
     b10:	7f 92       	push	r7
     b12:	8f 92       	push	r8
     b14:	9f 92       	push	r9
     b16:	af 92       	push	r10
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ec 01       	movw	r28, r24
     b28:	7b 01       	movw	r14, r22
     b2a:	49 01       	movw	r8, r18
     b2c:	5a 01       	movw	r10, r20
     b2e:	bc 01       	movw	r22, r24
     b30:	99 0f       	add	r25, r25
     b32:	88 0b       	sbc	r24, r24
     b34:	99 0b       	sbc	r25, r25
     b36:	0e 94 1a 07 	call	0xe34	; 0xe34 <__floatsisf>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	80 e8       	ldi	r24, 0x80	; 128
     b44:	9f e3       	ldi	r25, 0x3F	; 63
     b46:	0e 94 77 06 	call	0xcee	; 0xcee <__divsf3>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e4       	ldi	r19, 0x40	; 64
     b4e:	4c e1       	ldi	r20, 0x1C	; 28
     b50:	56 e4       	ldi	r21, 0x46	; 70
     b52:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	5f e3       	ldi	r21, 0x3F	; 63
     b5e:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     b62:	2b 01       	movw	r4, r22
     b64:	3c 01       	movw	r6, r24
     b66:	ce 9d       	mul	r28, r14
     b68:	b0 01       	movw	r22, r0
     b6a:	cf 9d       	mul	r28, r15
     b6c:	70 0d       	add	r23, r0
     b6e:	de 9d       	mul	r29, r14
     b70:	70 0d       	add	r23, r0
     b72:	11 24       	eor	r1, r1
     b74:	07 2e       	mov	r0, r23
     b76:	00 0c       	add	r0, r0
     b78:	88 0b       	sbc	r24, r24
     b7a:	99 0b       	sbc	r25, r25
     b7c:	0e 94 1a 07 	call	0xe34	; 0xe34 <__floatsisf>
     b80:	a5 01       	movw	r20, r10
     b82:	94 01       	movw	r18, r8
     b84:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     b88:	4b 01       	movw	r8, r22
     b8a:	5c 01       	movw	r10, r24
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	a9 01       	movw	r20, r18
     b92:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__gesf2>
     b96:	18 16       	cp	r1, r24
     b98:	04 f5       	brge	.+64     	; 0xbda <play_note2+0xd0>
     b9a:	c0 e0       	ldi	r28, 0x00	; 0
     b9c:	d0 e0       	ldi	r29, 0x00	; 0
     b9e:	d8 9a       	sbi	0x1b, 0	; 27
     ba0:	c3 01       	movw	r24, r6
     ba2:	b2 01       	movw	r22, r4
     ba4:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <__fixunssfsi>
     ba8:	6b 01       	movw	r12, r22
     baa:	7c 01       	movw	r14, r24
     bac:	cb 01       	movw	r24, r22
     bae:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
     bb2:	d8 98       	cbi	0x1b, 0	; 27
     bb4:	c6 01       	movw	r24, r12
     bb6:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
     bba:	21 96       	adiw	r28, 0x01	; 1
     bbc:	be 01       	movw	r22, r28
     bbe:	0d 2e       	mov	r0, r29
     bc0:	00 0c       	add	r0, r0
     bc2:	88 0b       	sbc	r24, r24
     bc4:	99 0b       	sbc	r25, r25
     bc6:	0e 94 1a 07 	call	0xe34	; 0xe34 <__floatsisf>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c5 01       	movw	r24, r10
     bd0:	b4 01       	movw	r22, r8
     bd2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__gesf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	14 f3       	brlt	.-60     	; 0xb9e <play_note2+0x94>
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	bf 90       	pop	r11
     be8:	af 90       	pop	r10
     bea:	9f 90       	pop	r9
     bec:	8f 90       	pop	r8
     bee:	7f 90       	pop	r7
     bf0:	6f 90       	pop	r6
     bf2:	5f 90       	pop	r5
     bf4:	4f 90       	pop	r4
     bf6:	08 95       	ret

00000bf8 <play_music2>:
     bf8:	8f 92       	push	r8
     bfa:	9f 92       	push	r9
     bfc:	af 92       	push	r10
     bfe:	bf 92       	push	r11
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	16 16       	cp	r1, r22
     c0e:	17 06       	cpc	r1, r23
     c10:	cc f4       	brge	.+50     	; 0xc44 <play_music2+0x4c>
     c12:	49 01       	movw	r8, r18
     c14:	5a 01       	movw	r10, r20
     c16:	7b 01       	movw	r14, r22
     c18:	c8 2f       	mov	r28, r24
     c1a:	d9 2f       	mov	r29, r25
     c1c:	00 e0       	ldi	r16, 0x00	; 0
     c1e:	10 e0       	ldi	r17, 0x00	; 0
     c20:	6a 81       	ldd	r22, Y+2	; 0x02
     c22:	7b 81       	ldd	r23, Y+3	; 0x03
     c24:	a5 01       	movw	r20, r10
     c26:	94 01       	movw	r18, r8
     c28:	88 81       	ld	r24, Y
     c2a:	99 81       	ldd	r25, Y+1	; 0x01
     c2c:	0e 94 85 05 	call	0xb0a	; 0xb0a <play_note2>
     c30:	84 e6       	ldi	r24, 0x64	; 100
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 49 00 	call	0x92	; 0x92 <wait_avr>
     c38:	0f 5f       	subi	r16, 0xFF	; 255
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	24 96       	adiw	r28, 0x04	; 4
     c3e:	e0 16       	cp	r14, r16
     c40:	f1 06       	cpc	r15, r17
     c42:	71 f7       	brne	.-36     	; 0xc20 <play_music2+0x28>
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	bf 90       	pop	r11
     c52:	af 90       	pop	r10
     c54:	9f 90       	pop	r9
     c56:	8f 90       	pop	r8
     c58:	08 95       	ret

00000c5a <happyBirthday>:
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	cc 55       	subi	r28, 0x5C	; 92
     c64:	d1 09       	sbc	r29, r1
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	8c e5       	ldi	r24, 0x5C	; 92
     c76:	e7 e8       	ldi	r30, 0x87	; 135
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	de 01       	movw	r26, r28
     c7c:	11 96       	adiw	r26, 0x01	; 1
     c7e:	01 90       	ld	r0, Z+
     c80:	0d 92       	st	X+, r0
     c82:	8a 95       	dec	r24
     c84:	e1 f7       	brne	.-8      	; 0xc7e <happyBirthday+0x24>
     c86:	67 e1       	ldi	r22, 0x17	; 23
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	ce 01       	movw	r24, r28
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <play_music2>
     c92:	c4 5a       	subi	r28, 0xA4	; 164
     c94:	df 4f       	sbci	r29, 0xFF	; 255
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <twinkleStarShort>:

 void twinkleStarShort(double speed) //14 note
  {
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	e8 97       	sbiw	r28, 0x38	; 56
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
	  struct note song[] = {
     cbe:	88 e3       	ldi	r24, 0x38	; 56
     cc0:	eb e8       	ldi	r30, 0x8B	; 139
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	de 01       	movw	r26, r28
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	01 90       	ld	r0, Z+
     cca:	0d 92       	st	X+, r0
     ccc:	8a 95       	dec	r24
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <twinkleStarShort+0x22>
		  { E4, 1  },
		  { D4, 1  },
		  { D4, 1  },
		  { C4, 2  }
	  };
	  play_music2(song, 14, speed); //has 14 notes
     cd0:	6e e0       	ldi	r22, 0x0E	; 14
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	ce 01       	movw	r24, r28
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <play_music2>
  }
     cdc:	e8 96       	adiw	r28, 0x38	; 56
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <__divsf3>:
     cee:	0e 94 8b 06 	call	0xd16	; 0xd16 <__divsf3x>
     cf2:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_round>
     cf6:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_pscB>
     cfa:	58 f0       	brcs	.+22     	; 0xd12 <__divsf3+0x24>
     cfc:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_pscA>
     d00:	40 f0       	brcs	.+16     	; 0xd12 <__divsf3+0x24>
     d02:	29 f4       	brne	.+10     	; 0xd0e <__divsf3+0x20>
     d04:	5f 3f       	cpi	r21, 0xFF	; 255
     d06:	29 f0       	breq	.+10     	; 0xd12 <__divsf3+0x24>
     d08:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__fp_inf>
     d0c:	51 11       	cpse	r21, r1
     d0e:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_szero>
     d12:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_nan>

00000d16 <__divsf3x>:
     d16:	0e 94 7d 07 	call	0xefa	; 0xefa <__fp_split3>
     d1a:	68 f3       	brcs	.-38     	; 0xcf6 <__divsf3+0x8>

00000d1c <__divsf3_pse>:
     d1c:	99 23       	and	r25, r25
     d1e:	b1 f3       	breq	.-20     	; 0xd0c <__divsf3+0x1e>
     d20:	55 23       	and	r21, r21
     d22:	91 f3       	breq	.-28     	; 0xd08 <__divsf3+0x1a>
     d24:	95 1b       	sub	r25, r21
     d26:	55 0b       	sbc	r21, r21
     d28:	bb 27       	eor	r27, r27
     d2a:	aa 27       	eor	r26, r26
     d2c:	62 17       	cp	r22, r18
     d2e:	73 07       	cpc	r23, r19
     d30:	84 07       	cpc	r24, r20
     d32:	38 f0       	brcs	.+14     	; 0xd42 <__divsf3_pse+0x26>
     d34:	9f 5f       	subi	r25, 0xFF	; 255
     d36:	5f 4f       	sbci	r21, 0xFF	; 255
     d38:	22 0f       	add	r18, r18
     d3a:	33 1f       	adc	r19, r19
     d3c:	44 1f       	adc	r20, r20
     d3e:	aa 1f       	adc	r26, r26
     d40:	a9 f3       	breq	.-22     	; 0xd2c <__divsf3_pse+0x10>
     d42:	35 d0       	rcall	.+106    	; 0xdae <__divsf3_pse+0x92>
     d44:	0e 2e       	mov	r0, r30
     d46:	3a f0       	brmi	.+14     	; 0xd56 <__divsf3_pse+0x3a>
     d48:	e0 e8       	ldi	r30, 0x80	; 128
     d4a:	32 d0       	rcall	.+100    	; 0xdb0 <__divsf3_pse+0x94>
     d4c:	91 50       	subi	r25, 0x01	; 1
     d4e:	50 40       	sbci	r21, 0x00	; 0
     d50:	e6 95       	lsr	r30
     d52:	00 1c       	adc	r0, r0
     d54:	ca f7       	brpl	.-14     	; 0xd48 <__divsf3_pse+0x2c>
     d56:	2b d0       	rcall	.+86     	; 0xdae <__divsf3_pse+0x92>
     d58:	fe 2f       	mov	r31, r30
     d5a:	29 d0       	rcall	.+82     	; 0xdae <__divsf3_pse+0x92>
     d5c:	66 0f       	add	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	88 1f       	adc	r24, r24
     d62:	bb 1f       	adc	r27, r27
     d64:	26 17       	cp	r18, r22
     d66:	37 07       	cpc	r19, r23
     d68:	48 07       	cpc	r20, r24
     d6a:	ab 07       	cpc	r26, r27
     d6c:	b0 e8       	ldi	r27, 0x80	; 128
     d6e:	09 f0       	breq	.+2      	; 0xd72 <__divsf3_pse+0x56>
     d70:	bb 0b       	sbc	r27, r27
     d72:	80 2d       	mov	r24, r0
     d74:	bf 01       	movw	r22, r30
     d76:	ff 27       	eor	r31, r31
     d78:	93 58       	subi	r25, 0x83	; 131
     d7a:	5f 4f       	sbci	r21, 0xFF	; 255
     d7c:	3a f0       	brmi	.+14     	; 0xd8c <__divsf3_pse+0x70>
     d7e:	9e 3f       	cpi	r25, 0xFE	; 254
     d80:	51 05       	cpc	r21, r1
     d82:	78 f0       	brcs	.+30     	; 0xda2 <__divsf3_pse+0x86>
     d84:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__fp_inf>
     d88:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_szero>
     d8c:	5f 3f       	cpi	r21, 0xFF	; 255
     d8e:	e4 f3       	brlt	.-8      	; 0xd88 <__divsf3_pse+0x6c>
     d90:	98 3e       	cpi	r25, 0xE8	; 232
     d92:	d4 f3       	brlt	.-12     	; 0xd88 <__divsf3_pse+0x6c>
     d94:	86 95       	lsr	r24
     d96:	77 95       	ror	r23
     d98:	67 95       	ror	r22
     d9a:	b7 95       	ror	r27
     d9c:	f7 95       	ror	r31
     d9e:	9f 5f       	subi	r25, 0xFF	; 255
     da0:	c9 f7       	brne	.-14     	; 0xd94 <__divsf3_pse+0x78>
     da2:	88 0f       	add	r24, r24
     da4:	91 1d       	adc	r25, r1
     da6:	96 95       	lsr	r25
     da8:	87 95       	ror	r24
     daa:	97 f9       	bld	r25, 7
     dac:	08 95       	ret
     dae:	e1 e0       	ldi	r30, 0x01	; 1
     db0:	66 0f       	add	r22, r22
     db2:	77 1f       	adc	r23, r23
     db4:	88 1f       	adc	r24, r24
     db6:	bb 1f       	adc	r27, r27
     db8:	62 17       	cp	r22, r18
     dba:	73 07       	cpc	r23, r19
     dbc:	84 07       	cpc	r24, r20
     dbe:	ba 07       	cpc	r27, r26
     dc0:	20 f0       	brcs	.+8      	; 0xdca <__divsf3_pse+0xae>
     dc2:	62 1b       	sub	r22, r18
     dc4:	73 0b       	sbc	r23, r19
     dc6:	84 0b       	sbc	r24, r20
     dc8:	ba 0b       	sbc	r27, r26
     dca:	ee 1f       	adc	r30, r30
     dcc:	88 f7       	brcc	.-30     	; 0xdb0 <__divsf3_pse+0x94>
     dce:	e0 95       	com	r30
     dd0:	08 95       	ret

00000dd2 <__fixunssfsi>:
     dd2:	0e 94 85 07 	call	0xf0a	; 0xf0a <__fp_splitA>
     dd6:	88 f0       	brcs	.+34     	; 0xdfa <__fixunssfsi+0x28>
     dd8:	9f 57       	subi	r25, 0x7F	; 127
     dda:	98 f0       	brcs	.+38     	; 0xe02 <__fixunssfsi+0x30>
     ddc:	b9 2f       	mov	r27, r25
     dde:	99 27       	eor	r25, r25
     de0:	b7 51       	subi	r27, 0x17	; 23
     de2:	b0 f0       	brcs	.+44     	; 0xe10 <__fixunssfsi+0x3e>
     de4:	e1 f0       	breq	.+56     	; 0xe1e <__fixunssfsi+0x4c>
     de6:	66 0f       	add	r22, r22
     de8:	77 1f       	adc	r23, r23
     dea:	88 1f       	adc	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	1a f0       	brmi	.+6      	; 0xdf6 <__fixunssfsi+0x24>
     df0:	ba 95       	dec	r27
     df2:	c9 f7       	brne	.-14     	; 0xde6 <__fixunssfsi+0x14>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <__fixunssfsi+0x4c>
     df6:	b1 30       	cpi	r27, 0x01	; 1
     df8:	91 f0       	breq	.+36     	; 0xe1e <__fixunssfsi+0x4c>
     dfa:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__fp_zero>
     dfe:	b1 e0       	ldi	r27, 0x01	; 1
     e00:	08 95       	ret
     e02:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__fp_zero>
     e06:	67 2f       	mov	r22, r23
     e08:	78 2f       	mov	r23, r24
     e0a:	88 27       	eor	r24, r24
     e0c:	b8 5f       	subi	r27, 0xF8	; 248
     e0e:	39 f0       	breq	.+14     	; 0xe1e <__fixunssfsi+0x4c>
     e10:	b9 3f       	cpi	r27, 0xF9	; 249
     e12:	cc f3       	brlt	.-14     	; 0xe06 <__fixunssfsi+0x34>
     e14:	86 95       	lsr	r24
     e16:	77 95       	ror	r23
     e18:	67 95       	ror	r22
     e1a:	b3 95       	inc	r27
     e1c:	d9 f7       	brne	.-10     	; 0xe14 <__fixunssfsi+0x42>
     e1e:	3e f4       	brtc	.+14     	; 0xe2e <__fixunssfsi+0x5c>
     e20:	90 95       	com	r25
     e22:	80 95       	com	r24
     e24:	70 95       	com	r23
     e26:	61 95       	neg	r22
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 4f       	sbci	r24, 0xFF	; 255
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	08 95       	ret

00000e30 <__floatunsisf>:
     e30:	e8 94       	clt
     e32:	09 c0       	rjmp	.+18     	; 0xe46 <__floatsisf+0x12>

00000e34 <__floatsisf>:
     e34:	97 fb       	bst	r25, 7
     e36:	3e f4       	brtc	.+14     	; 0xe46 <__floatsisf+0x12>
     e38:	90 95       	com	r25
     e3a:	80 95       	com	r24
     e3c:	70 95       	com	r23
     e3e:	61 95       	neg	r22
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	8f 4f       	sbci	r24, 0xFF	; 255
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	99 23       	and	r25, r25
     e48:	a9 f0       	breq	.+42     	; 0xe74 <__floatsisf+0x40>
     e4a:	f9 2f       	mov	r31, r25
     e4c:	96 e9       	ldi	r25, 0x96	; 150
     e4e:	bb 27       	eor	r27, r27
     e50:	93 95       	inc	r25
     e52:	f6 95       	lsr	r31
     e54:	87 95       	ror	r24
     e56:	77 95       	ror	r23
     e58:	67 95       	ror	r22
     e5a:	b7 95       	ror	r27
     e5c:	f1 11       	cpse	r31, r1
     e5e:	f8 cf       	rjmp	.-16     	; 0xe50 <__floatsisf+0x1c>
     e60:	fa f4       	brpl	.+62     	; 0xea0 <__floatsisf+0x6c>
     e62:	bb 0f       	add	r27, r27
     e64:	11 f4       	brne	.+4      	; 0xe6a <__floatsisf+0x36>
     e66:	60 ff       	sbrs	r22, 0
     e68:	1b c0       	rjmp	.+54     	; 0xea0 <__floatsisf+0x6c>
     e6a:	6f 5f       	subi	r22, 0xFF	; 255
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	16 c0       	rjmp	.+44     	; 0xea0 <__floatsisf+0x6c>
     e74:	88 23       	and	r24, r24
     e76:	11 f0       	breq	.+4      	; 0xe7c <__floatsisf+0x48>
     e78:	96 e9       	ldi	r25, 0x96	; 150
     e7a:	11 c0       	rjmp	.+34     	; 0xe9e <__floatsisf+0x6a>
     e7c:	77 23       	and	r23, r23
     e7e:	21 f0       	breq	.+8      	; 0xe88 <__floatsisf+0x54>
     e80:	9e e8       	ldi	r25, 0x8E	; 142
     e82:	87 2f       	mov	r24, r23
     e84:	76 2f       	mov	r23, r22
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <__floatsisf+0x5e>
     e88:	66 23       	and	r22, r22
     e8a:	71 f0       	breq	.+28     	; 0xea8 <__floatsisf+0x74>
     e8c:	96 e8       	ldi	r25, 0x86	; 134
     e8e:	86 2f       	mov	r24, r22
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	60 e0       	ldi	r22, 0x00	; 0
     e94:	2a f0       	brmi	.+10     	; 0xea0 <__floatsisf+0x6c>
     e96:	9a 95       	dec	r25
     e98:	66 0f       	add	r22, r22
     e9a:	77 1f       	adc	r23, r23
     e9c:	88 1f       	adc	r24, r24
     e9e:	da f7       	brpl	.-10     	; 0xe96 <__floatsisf+0x62>
     ea0:	88 0f       	add	r24, r24
     ea2:	96 95       	lsr	r25
     ea4:	87 95       	ror	r24
     ea6:	97 f9       	bld	r25, 7
     ea8:	08 95       	ret

00000eaa <__fp_inf>:
     eaa:	97 f9       	bld	r25, 7
     eac:	9f 67       	ori	r25, 0x7F	; 127
     eae:	80 e8       	ldi	r24, 0x80	; 128
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	08 95       	ret

00000eb6 <__fp_nan>:
     eb6:	9f ef       	ldi	r25, 0xFF	; 255
     eb8:	80 ec       	ldi	r24, 0xC0	; 192
     eba:	08 95       	ret

00000ebc <__fp_pscA>:
     ebc:	00 24       	eor	r0, r0
     ebe:	0a 94       	dec	r0
     ec0:	16 16       	cp	r1, r22
     ec2:	17 06       	cpc	r1, r23
     ec4:	18 06       	cpc	r1, r24
     ec6:	09 06       	cpc	r0, r25
     ec8:	08 95       	ret

00000eca <__fp_pscB>:
     eca:	00 24       	eor	r0, r0
     ecc:	0a 94       	dec	r0
     ece:	12 16       	cp	r1, r18
     ed0:	13 06       	cpc	r1, r19
     ed2:	14 06       	cpc	r1, r20
     ed4:	05 06       	cpc	r0, r21
     ed6:	08 95       	ret

00000ed8 <__fp_round>:
     ed8:	09 2e       	mov	r0, r25
     eda:	03 94       	inc	r0
     edc:	00 0c       	add	r0, r0
     ede:	11 f4       	brne	.+4      	; 0xee4 <__fp_round+0xc>
     ee0:	88 23       	and	r24, r24
     ee2:	52 f0       	brmi	.+20     	; 0xef8 <__fp_round+0x20>
     ee4:	bb 0f       	add	r27, r27
     ee6:	40 f4       	brcc	.+16     	; 0xef8 <__fp_round+0x20>
     ee8:	bf 2b       	or	r27, r31
     eea:	11 f4       	brne	.+4      	; 0xef0 <__fp_round+0x18>
     eec:	60 ff       	sbrs	r22, 0
     eee:	04 c0       	rjmp	.+8      	; 0xef8 <__fp_round+0x20>
     ef0:	6f 5f       	subi	r22, 0xFF	; 255
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	8f 4f       	sbci	r24, 0xFF	; 255
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	08 95       	ret

00000efa <__fp_split3>:
     efa:	57 fd       	sbrc	r21, 7
     efc:	90 58       	subi	r25, 0x80	; 128
     efe:	44 0f       	add	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	59 f0       	breq	.+22     	; 0xf1a <__fp_splitA+0x10>
     f04:	5f 3f       	cpi	r21, 0xFF	; 255
     f06:	71 f0       	breq	.+28     	; 0xf24 <__fp_splitA+0x1a>
     f08:	47 95       	ror	r20

00000f0a <__fp_splitA>:
     f0a:	88 0f       	add	r24, r24
     f0c:	97 fb       	bst	r25, 7
     f0e:	99 1f       	adc	r25, r25
     f10:	61 f0       	breq	.+24     	; 0xf2a <__fp_splitA+0x20>
     f12:	9f 3f       	cpi	r25, 0xFF	; 255
     f14:	79 f0       	breq	.+30     	; 0xf34 <__fp_splitA+0x2a>
     f16:	87 95       	ror	r24
     f18:	08 95       	ret
     f1a:	12 16       	cp	r1, r18
     f1c:	13 06       	cpc	r1, r19
     f1e:	14 06       	cpc	r1, r20
     f20:	55 1f       	adc	r21, r21
     f22:	f2 cf       	rjmp	.-28     	; 0xf08 <__fp_split3+0xe>
     f24:	46 95       	lsr	r20
     f26:	f1 df       	rcall	.-30     	; 0xf0a <__fp_splitA>
     f28:	08 c0       	rjmp	.+16     	; 0xf3a <__fp_splitA+0x30>
     f2a:	16 16       	cp	r1, r22
     f2c:	17 06       	cpc	r1, r23
     f2e:	18 06       	cpc	r1, r24
     f30:	99 1f       	adc	r25, r25
     f32:	f1 cf       	rjmp	.-30     	; 0xf16 <__fp_splitA+0xc>
     f34:	86 95       	lsr	r24
     f36:	71 05       	cpc	r23, r1
     f38:	61 05       	cpc	r22, r1
     f3a:	08 94       	sec
     f3c:	08 95       	ret

00000f3e <__fp_zero>:
     f3e:	e8 94       	clt

00000f40 <__fp_szero>:
     f40:	bb 27       	eor	r27, r27
     f42:	66 27       	eor	r22, r22
     f44:	77 27       	eor	r23, r23
     f46:	cb 01       	movw	r24, r22
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__gesf2>:
     f4c:	0e 94 18 08 	call	0x1030	; 0x1030 <__fp_cmp>
     f50:	08 f4       	brcc	.+2      	; 0xf54 <__gesf2+0x8>
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	08 95       	ret

00000f56 <__mulsf3>:
     f56:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3x>
     f5a:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__fp_round>
     f5e:	0e 94 5e 07 	call	0xebc	; 0xebc <__fp_pscA>
     f62:	38 f0       	brcs	.+14     	; 0xf72 <__mulsf3+0x1c>
     f64:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_pscB>
     f68:	20 f0       	brcs	.+8      	; 0xf72 <__mulsf3+0x1c>
     f6a:	95 23       	and	r25, r21
     f6c:	11 f0       	breq	.+4      	; 0xf72 <__mulsf3+0x1c>
     f6e:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__fp_inf>
     f72:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__fp_nan>
     f76:	11 24       	eor	r1, r1
     f78:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_szero>

00000f7c <__mulsf3x>:
     f7c:	0e 94 7d 07 	call	0xefa	; 0xefa <__fp_split3>
     f80:	70 f3       	brcs	.-36     	; 0xf5e <__mulsf3+0x8>

00000f82 <__mulsf3_pse>:
     f82:	95 9f       	mul	r25, r21
     f84:	c1 f3       	breq	.-16     	; 0xf76 <__mulsf3+0x20>
     f86:	95 0f       	add	r25, r21
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	55 1f       	adc	r21, r21
     f8c:	62 9f       	mul	r22, r18
     f8e:	f0 01       	movw	r30, r0
     f90:	72 9f       	mul	r23, r18
     f92:	bb 27       	eor	r27, r27
     f94:	f0 0d       	add	r31, r0
     f96:	b1 1d       	adc	r27, r1
     f98:	63 9f       	mul	r22, r19
     f9a:	aa 27       	eor	r26, r26
     f9c:	f0 0d       	add	r31, r0
     f9e:	b1 1d       	adc	r27, r1
     fa0:	aa 1f       	adc	r26, r26
     fa2:	64 9f       	mul	r22, r20
     fa4:	66 27       	eor	r22, r22
     fa6:	b0 0d       	add	r27, r0
     fa8:	a1 1d       	adc	r26, r1
     faa:	66 1f       	adc	r22, r22
     fac:	82 9f       	mul	r24, r18
     fae:	22 27       	eor	r18, r18
     fb0:	b0 0d       	add	r27, r0
     fb2:	a1 1d       	adc	r26, r1
     fb4:	62 1f       	adc	r22, r18
     fb6:	73 9f       	mul	r23, r19
     fb8:	b0 0d       	add	r27, r0
     fba:	a1 1d       	adc	r26, r1
     fbc:	62 1f       	adc	r22, r18
     fbe:	83 9f       	mul	r24, r19
     fc0:	a0 0d       	add	r26, r0
     fc2:	61 1d       	adc	r22, r1
     fc4:	22 1f       	adc	r18, r18
     fc6:	74 9f       	mul	r23, r20
     fc8:	33 27       	eor	r19, r19
     fca:	a0 0d       	add	r26, r0
     fcc:	61 1d       	adc	r22, r1
     fce:	23 1f       	adc	r18, r19
     fd0:	84 9f       	mul	r24, r20
     fd2:	60 0d       	add	r22, r0
     fd4:	21 1d       	adc	r18, r1
     fd6:	82 2f       	mov	r24, r18
     fd8:	76 2f       	mov	r23, r22
     fda:	6a 2f       	mov	r22, r26
     fdc:	11 24       	eor	r1, r1
     fde:	9f 57       	subi	r25, 0x7F	; 127
     fe0:	50 40       	sbci	r21, 0x00	; 0
     fe2:	9a f0       	brmi	.+38     	; 0x100a <__mulsf3_pse+0x88>
     fe4:	f1 f0       	breq	.+60     	; 0x1022 <__mulsf3_pse+0xa0>
     fe6:	88 23       	and	r24, r24
     fe8:	4a f0       	brmi	.+18     	; 0xffc <__mulsf3_pse+0x7a>
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	bb 1f       	adc	r27, r27
     ff0:	66 1f       	adc	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	91 50       	subi	r25, 0x01	; 1
     ff8:	50 40       	sbci	r21, 0x00	; 0
     ffa:	a9 f7       	brne	.-22     	; 0xfe6 <__mulsf3_pse+0x64>
     ffc:	9e 3f       	cpi	r25, 0xFE	; 254
     ffe:	51 05       	cpc	r21, r1
    1000:	80 f0       	brcs	.+32     	; 0x1022 <__mulsf3_pse+0xa0>
    1002:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__fp_inf>
    1006:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_szero>
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	e4 f3       	brlt	.-8      	; 0x1006 <__mulsf3_pse+0x84>
    100e:	98 3e       	cpi	r25, 0xE8	; 232
    1010:	d4 f3       	brlt	.-12     	; 0x1006 <__mulsf3_pse+0x84>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b7 95       	ror	r27
    101a:	f7 95       	ror	r31
    101c:	e7 95       	ror	r30
    101e:	9f 5f       	subi	r25, 0xFF	; 255
    1020:	c1 f7       	brne	.-16     	; 0x1012 <__mulsf3_pse+0x90>
    1022:	fe 2b       	or	r31, r30
    1024:	88 0f       	add	r24, r24
    1026:	91 1d       	adc	r25, r1
    1028:	96 95       	lsr	r25
    102a:	87 95       	ror	r24
    102c:	97 f9       	bld	r25, 7
    102e:	08 95       	ret

00001030 <__fp_cmp>:
    1030:	99 0f       	add	r25, r25
    1032:	00 08       	sbc	r0, r0
    1034:	55 0f       	add	r21, r21
    1036:	aa 0b       	sbc	r26, r26
    1038:	e0 e8       	ldi	r30, 0x80	; 128
    103a:	fe ef       	ldi	r31, 0xFE	; 254
    103c:	16 16       	cp	r1, r22
    103e:	17 06       	cpc	r1, r23
    1040:	e8 07       	cpc	r30, r24
    1042:	f9 07       	cpc	r31, r25
    1044:	c0 f0       	brcs	.+48     	; 0x1076 <__fp_cmp+0x46>
    1046:	12 16       	cp	r1, r18
    1048:	13 06       	cpc	r1, r19
    104a:	e4 07       	cpc	r30, r20
    104c:	f5 07       	cpc	r31, r21
    104e:	98 f0       	brcs	.+38     	; 0x1076 <__fp_cmp+0x46>
    1050:	62 1b       	sub	r22, r18
    1052:	73 0b       	sbc	r23, r19
    1054:	84 0b       	sbc	r24, r20
    1056:	95 0b       	sbc	r25, r21
    1058:	39 f4       	brne	.+14     	; 0x1068 <__fp_cmp+0x38>
    105a:	0a 26       	eor	r0, r26
    105c:	61 f0       	breq	.+24     	; 0x1076 <__fp_cmp+0x46>
    105e:	23 2b       	or	r18, r19
    1060:	24 2b       	or	r18, r20
    1062:	25 2b       	or	r18, r21
    1064:	21 f4       	brne	.+8      	; 0x106e <__fp_cmp+0x3e>
    1066:	08 95       	ret
    1068:	0a 26       	eor	r0, r26
    106a:	09 f4       	brne	.+2      	; 0x106e <__fp_cmp+0x3e>
    106c:	a1 40       	sbci	r26, 0x01	; 1
    106e:	a6 95       	lsr	r26
    1070:	8f ef       	ldi	r24, 0xFF	; 255
    1072:	81 1d       	adc	r24, r1
    1074:	81 1d       	adc	r24, r1
    1076:	08 95       	ret

00001078 <sprintf>:
    1078:	ae e0       	ldi	r26, 0x0E	; 14
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e2 e4       	ldi	r30, 0x42	; 66
    107e:	f8 e0       	ldi	r31, 0x08	; 8
    1080:	0c 94 fd 0a 	jmp	0x15fa	; 0x15fa <__prologue_saves__+0x1c>
    1084:	0d 89       	ldd	r16, Y+21	; 0x15
    1086:	1e 89       	ldd	r17, Y+22	; 0x16
    1088:	86 e0       	ldi	r24, 0x06	; 6
    108a:	8c 83       	std	Y+4, r24	; 0x04
    108c:	1a 83       	std	Y+2, r17	; 0x02
    108e:	09 83       	std	Y+1, r16	; 0x01
    1090:	8f ef       	ldi	r24, 0xFF	; 255
    1092:	9f e7       	ldi	r25, 0x7F	; 127
    1094:	9e 83       	std	Y+6, r25	; 0x06
    1096:	8d 83       	std	Y+5, r24	; 0x05
    1098:	ae 01       	movw	r20, r28
    109a:	47 5e       	subi	r20, 0xE7	; 231
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	6f 89       	ldd	r22, Y+23	; 0x17
    10a0:	78 8d       	ldd	r23, Y+24	; 0x18
    10a2:	ce 01       	movw	r24, r28
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	0e 94 5e 08 	call	0x10bc	; 0x10bc <vfprintf>
    10aa:	ef 81       	ldd	r30, Y+7	; 0x07
    10ac:	f8 85       	ldd	r31, Y+8	; 0x08
    10ae:	e0 0f       	add	r30, r16
    10b0:	f1 1f       	adc	r31, r17
    10b2:	10 82       	st	Z, r1
    10b4:	2e 96       	adiw	r28, 0x0e	; 14
    10b6:	e4 e0       	ldi	r30, 0x04	; 4
    10b8:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__epilogue_restores__+0x1c>

000010bc <vfprintf>:
    10bc:	ab e0       	ldi	r26, 0x0B	; 11
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e4 e6       	ldi	r30, 0x64	; 100
    10c2:	f8 e0       	ldi	r31, 0x08	; 8
    10c4:	0c 94 ef 0a 	jmp	0x15de	; 0x15de <__prologue_saves__>
    10c8:	6c 01       	movw	r12, r24
    10ca:	7b 01       	movw	r14, r22
    10cc:	8a 01       	movw	r16, r20
    10ce:	fc 01       	movw	r30, r24
    10d0:	17 82       	std	Z+7, r1	; 0x07
    10d2:	16 82       	std	Z+6, r1	; 0x06
    10d4:	83 81       	ldd	r24, Z+3	; 0x03
    10d6:	81 ff       	sbrs	r24, 1
    10d8:	cc c1       	rjmp	.+920    	; 0x1472 <vfprintf+0x3b6>
    10da:	ce 01       	movw	r24, r28
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	3c 01       	movw	r6, r24
    10e0:	f6 01       	movw	r30, r12
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	f7 01       	movw	r30, r14
    10e6:	93 fd       	sbrc	r25, 3
    10e8:	85 91       	lpm	r24, Z+
    10ea:	93 ff       	sbrs	r25, 3
    10ec:	81 91       	ld	r24, Z+
    10ee:	7f 01       	movw	r14, r30
    10f0:	88 23       	and	r24, r24
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <vfprintf+0x3a>
    10f4:	ba c1       	rjmp	.+884    	; 0x146a <vfprintf+0x3ae>
    10f6:	85 32       	cpi	r24, 0x25	; 37
    10f8:	39 f4       	brne	.+14     	; 0x1108 <vfprintf+0x4c>
    10fa:	93 fd       	sbrc	r25, 3
    10fc:	85 91       	lpm	r24, Z+
    10fe:	93 ff       	sbrs	r25, 3
    1100:	81 91       	ld	r24, Z+
    1102:	7f 01       	movw	r14, r30
    1104:	85 32       	cpi	r24, 0x25	; 37
    1106:	29 f4       	brne	.+10     	; 0x1112 <vfprintf+0x56>
    1108:	b6 01       	movw	r22, r12
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1110:	e7 cf       	rjmp	.-50     	; 0x10e0 <vfprintf+0x24>
    1112:	91 2c       	mov	r9, r1
    1114:	21 2c       	mov	r2, r1
    1116:	31 2c       	mov	r3, r1
    1118:	ff e1       	ldi	r31, 0x1F	; 31
    111a:	f3 15       	cp	r31, r3
    111c:	d8 f0       	brcs	.+54     	; 0x1154 <vfprintf+0x98>
    111e:	8b 32       	cpi	r24, 0x2B	; 43
    1120:	79 f0       	breq	.+30     	; 0x1140 <vfprintf+0x84>
    1122:	38 f4       	brcc	.+14     	; 0x1132 <vfprintf+0x76>
    1124:	80 32       	cpi	r24, 0x20	; 32
    1126:	79 f0       	breq	.+30     	; 0x1146 <vfprintf+0x8a>
    1128:	83 32       	cpi	r24, 0x23	; 35
    112a:	a1 f4       	brne	.+40     	; 0x1154 <vfprintf+0x98>
    112c:	23 2d       	mov	r18, r3
    112e:	20 61       	ori	r18, 0x10	; 16
    1130:	1d c0       	rjmp	.+58     	; 0x116c <vfprintf+0xb0>
    1132:	8d 32       	cpi	r24, 0x2D	; 45
    1134:	61 f0       	breq	.+24     	; 0x114e <vfprintf+0x92>
    1136:	80 33       	cpi	r24, 0x30	; 48
    1138:	69 f4       	brne	.+26     	; 0x1154 <vfprintf+0x98>
    113a:	23 2d       	mov	r18, r3
    113c:	21 60       	ori	r18, 0x01	; 1
    113e:	16 c0       	rjmp	.+44     	; 0x116c <vfprintf+0xb0>
    1140:	83 2d       	mov	r24, r3
    1142:	82 60       	ori	r24, 0x02	; 2
    1144:	38 2e       	mov	r3, r24
    1146:	e3 2d       	mov	r30, r3
    1148:	e4 60       	ori	r30, 0x04	; 4
    114a:	3e 2e       	mov	r3, r30
    114c:	2a c0       	rjmp	.+84     	; 0x11a2 <vfprintf+0xe6>
    114e:	f3 2d       	mov	r31, r3
    1150:	f8 60       	ori	r31, 0x08	; 8
    1152:	1d c0       	rjmp	.+58     	; 0x118e <vfprintf+0xd2>
    1154:	37 fc       	sbrc	r3, 7
    1156:	2d c0       	rjmp	.+90     	; 0x11b2 <vfprintf+0xf6>
    1158:	20 ed       	ldi	r18, 0xD0	; 208
    115a:	28 0f       	add	r18, r24
    115c:	2a 30       	cpi	r18, 0x0A	; 10
    115e:	40 f0       	brcs	.+16     	; 0x1170 <vfprintf+0xb4>
    1160:	8e 32       	cpi	r24, 0x2E	; 46
    1162:	b9 f4       	brne	.+46     	; 0x1192 <vfprintf+0xd6>
    1164:	36 fc       	sbrc	r3, 6
    1166:	81 c1       	rjmp	.+770    	; 0x146a <vfprintf+0x3ae>
    1168:	23 2d       	mov	r18, r3
    116a:	20 64       	ori	r18, 0x40	; 64
    116c:	32 2e       	mov	r3, r18
    116e:	19 c0       	rjmp	.+50     	; 0x11a2 <vfprintf+0xe6>
    1170:	36 fe       	sbrs	r3, 6
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <vfprintf+0xc4>
    1174:	8a e0       	ldi	r24, 0x0A	; 10
    1176:	98 9e       	mul	r9, r24
    1178:	20 0d       	add	r18, r0
    117a:	11 24       	eor	r1, r1
    117c:	92 2e       	mov	r9, r18
    117e:	11 c0       	rjmp	.+34     	; 0x11a2 <vfprintf+0xe6>
    1180:	ea e0       	ldi	r30, 0x0A	; 10
    1182:	2e 9e       	mul	r2, r30
    1184:	20 0d       	add	r18, r0
    1186:	11 24       	eor	r1, r1
    1188:	22 2e       	mov	r2, r18
    118a:	f3 2d       	mov	r31, r3
    118c:	f0 62       	ori	r31, 0x20	; 32
    118e:	3f 2e       	mov	r3, r31
    1190:	08 c0       	rjmp	.+16     	; 0x11a2 <vfprintf+0xe6>
    1192:	8c 36       	cpi	r24, 0x6C	; 108
    1194:	21 f4       	brne	.+8      	; 0x119e <vfprintf+0xe2>
    1196:	83 2d       	mov	r24, r3
    1198:	80 68       	ori	r24, 0x80	; 128
    119a:	38 2e       	mov	r3, r24
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0xe6>
    119e:	88 36       	cpi	r24, 0x68	; 104
    11a0:	41 f4       	brne	.+16     	; 0x11b2 <vfprintf+0xf6>
    11a2:	f7 01       	movw	r30, r14
    11a4:	93 fd       	sbrc	r25, 3
    11a6:	85 91       	lpm	r24, Z+
    11a8:	93 ff       	sbrs	r25, 3
    11aa:	81 91       	ld	r24, Z+
    11ac:	7f 01       	movw	r14, r30
    11ae:	81 11       	cpse	r24, r1
    11b0:	b3 cf       	rjmp	.-154    	; 0x1118 <vfprintf+0x5c>
    11b2:	98 2f       	mov	r25, r24
    11b4:	9f 7d       	andi	r25, 0xDF	; 223
    11b6:	95 54       	subi	r25, 0x45	; 69
    11b8:	93 30       	cpi	r25, 0x03	; 3
    11ba:	28 f4       	brcc	.+10     	; 0x11c6 <vfprintf+0x10a>
    11bc:	0c 5f       	subi	r16, 0xFC	; 252
    11be:	1f 4f       	sbci	r17, 0xFF	; 255
    11c0:	9f e3       	ldi	r25, 0x3F	; 63
    11c2:	99 83       	std	Y+1, r25	; 0x01
    11c4:	0d c0       	rjmp	.+26     	; 0x11e0 <vfprintf+0x124>
    11c6:	83 36       	cpi	r24, 0x63	; 99
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <vfprintf+0x11a>
    11ca:	83 37       	cpi	r24, 0x73	; 115
    11cc:	71 f0       	breq	.+28     	; 0x11ea <vfprintf+0x12e>
    11ce:	83 35       	cpi	r24, 0x53	; 83
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <vfprintf+0x118>
    11d2:	59 c0       	rjmp	.+178    	; 0x1286 <vfprintf+0x1ca>
    11d4:	21 c0       	rjmp	.+66     	; 0x1218 <vfprintf+0x15c>
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 81       	ld	r24, Z
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0e 5f       	subi	r16, 0xFE	; 254
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	88 24       	eor	r8, r8
    11e2:	83 94       	inc	r8
    11e4:	91 2c       	mov	r9, r1
    11e6:	53 01       	movw	r10, r6
    11e8:	13 c0       	rjmp	.+38     	; 0x1210 <vfprintf+0x154>
    11ea:	28 01       	movw	r4, r16
    11ec:	f2 e0       	ldi	r31, 0x02	; 2
    11ee:	4f 0e       	add	r4, r31
    11f0:	51 1c       	adc	r5, r1
    11f2:	f8 01       	movw	r30, r16
    11f4:	a0 80       	ld	r10, Z
    11f6:	b1 80       	ldd	r11, Z+1	; 0x01
    11f8:	36 fe       	sbrs	r3, 6
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <vfprintf+0x146>
    11fc:	69 2d       	mov	r22, r9
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <vfprintf+0x14a>
    1202:	6f ef       	ldi	r22, 0xFF	; 255
    1204:	7f ef       	ldi	r23, 0xFF	; 255
    1206:	c5 01       	movw	r24, r10
    1208:	0e 94 4a 0a 	call	0x1494	; 0x1494 <strnlen>
    120c:	4c 01       	movw	r8, r24
    120e:	82 01       	movw	r16, r4
    1210:	f3 2d       	mov	r31, r3
    1212:	ff 77       	andi	r31, 0x7F	; 127
    1214:	3f 2e       	mov	r3, r31
    1216:	16 c0       	rjmp	.+44     	; 0x1244 <vfprintf+0x188>
    1218:	28 01       	movw	r4, r16
    121a:	22 e0       	ldi	r18, 0x02	; 2
    121c:	42 0e       	add	r4, r18
    121e:	51 1c       	adc	r5, r1
    1220:	f8 01       	movw	r30, r16
    1222:	a0 80       	ld	r10, Z
    1224:	b1 80       	ldd	r11, Z+1	; 0x01
    1226:	36 fe       	sbrs	r3, 6
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <vfprintf+0x174>
    122a:	69 2d       	mov	r22, r9
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfprintf+0x178>
    1230:	6f ef       	ldi	r22, 0xFF	; 255
    1232:	7f ef       	ldi	r23, 0xFF	; 255
    1234:	c5 01       	movw	r24, r10
    1236:	0e 94 3f 0a 	call	0x147e	; 0x147e <strnlen_P>
    123a:	4c 01       	movw	r8, r24
    123c:	f3 2d       	mov	r31, r3
    123e:	f0 68       	ori	r31, 0x80	; 128
    1240:	3f 2e       	mov	r3, r31
    1242:	82 01       	movw	r16, r4
    1244:	33 fc       	sbrc	r3, 3
    1246:	1b c0       	rjmp	.+54     	; 0x127e <vfprintf+0x1c2>
    1248:	82 2d       	mov	r24, r2
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	88 16       	cp	r8, r24
    124e:	99 06       	cpc	r9, r25
    1250:	b0 f4       	brcc	.+44     	; 0x127e <vfprintf+0x1c2>
    1252:	b6 01       	movw	r22, r12
    1254:	80 e2       	ldi	r24, 0x20	; 32
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    125c:	2a 94       	dec	r2
    125e:	f4 cf       	rjmp	.-24     	; 0x1248 <vfprintf+0x18c>
    1260:	f5 01       	movw	r30, r10
    1262:	37 fc       	sbrc	r3, 7
    1264:	85 91       	lpm	r24, Z+
    1266:	37 fe       	sbrs	r3, 7
    1268:	81 91       	ld	r24, Z+
    126a:	5f 01       	movw	r10, r30
    126c:	b6 01       	movw	r22, r12
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1274:	21 10       	cpse	r2, r1
    1276:	2a 94       	dec	r2
    1278:	21 e0       	ldi	r18, 0x01	; 1
    127a:	82 1a       	sub	r8, r18
    127c:	91 08       	sbc	r9, r1
    127e:	81 14       	cp	r8, r1
    1280:	91 04       	cpc	r9, r1
    1282:	71 f7       	brne	.-36     	; 0x1260 <vfprintf+0x1a4>
    1284:	e8 c0       	rjmp	.+464    	; 0x1456 <vfprintf+0x39a>
    1286:	84 36       	cpi	r24, 0x64	; 100
    1288:	11 f0       	breq	.+4      	; 0x128e <vfprintf+0x1d2>
    128a:	89 36       	cpi	r24, 0x69	; 105
    128c:	41 f5       	brne	.+80     	; 0x12de <vfprintf+0x222>
    128e:	f8 01       	movw	r30, r16
    1290:	37 fe       	sbrs	r3, 7
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <vfprintf+0x1e6>
    1294:	60 81       	ld	r22, Z
    1296:	71 81       	ldd	r23, Z+1	; 0x01
    1298:	82 81       	ldd	r24, Z+2	; 0x02
    129a:	93 81       	ldd	r25, Z+3	; 0x03
    129c:	0c 5f       	subi	r16, 0xFC	; 252
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <vfprintf+0x1f6>
    12a2:	60 81       	ld	r22, Z
    12a4:	71 81       	ldd	r23, Z+1	; 0x01
    12a6:	07 2e       	mov	r0, r23
    12a8:	00 0c       	add	r0, r0
    12aa:	88 0b       	sbc	r24, r24
    12ac:	99 0b       	sbc	r25, r25
    12ae:	0e 5f       	subi	r16, 0xFE	; 254
    12b0:	1f 4f       	sbci	r17, 0xFF	; 255
    12b2:	f3 2d       	mov	r31, r3
    12b4:	ff 76       	andi	r31, 0x6F	; 111
    12b6:	3f 2e       	mov	r3, r31
    12b8:	97 ff       	sbrs	r25, 7
    12ba:	09 c0       	rjmp	.+18     	; 0x12ce <vfprintf+0x212>
    12bc:	90 95       	com	r25
    12be:	80 95       	com	r24
    12c0:	70 95       	com	r23
    12c2:	61 95       	neg	r22
    12c4:	7f 4f       	sbci	r23, 0xFF	; 255
    12c6:	8f 4f       	sbci	r24, 0xFF	; 255
    12c8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ca:	f0 68       	ori	r31, 0x80	; 128
    12cc:	3f 2e       	mov	r3, r31
    12ce:	2a e0       	ldi	r18, 0x0A	; 10
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	a3 01       	movw	r20, r6
    12d4:	0e 94 91 0a 	call	0x1522	; 0x1522 <__ultoa_invert>
    12d8:	88 2e       	mov	r8, r24
    12da:	86 18       	sub	r8, r6
    12dc:	45 c0       	rjmp	.+138    	; 0x1368 <vfprintf+0x2ac>
    12de:	85 37       	cpi	r24, 0x75	; 117
    12e0:	31 f4       	brne	.+12     	; 0x12ee <vfprintf+0x232>
    12e2:	23 2d       	mov	r18, r3
    12e4:	2f 7e       	andi	r18, 0xEF	; 239
    12e6:	b2 2e       	mov	r11, r18
    12e8:	2a e0       	ldi	r18, 0x0A	; 10
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	25 c0       	rjmp	.+74     	; 0x1338 <vfprintf+0x27c>
    12ee:	93 2d       	mov	r25, r3
    12f0:	99 7f       	andi	r25, 0xF9	; 249
    12f2:	b9 2e       	mov	r11, r25
    12f4:	8f 36       	cpi	r24, 0x6F	; 111
    12f6:	c1 f0       	breq	.+48     	; 0x1328 <vfprintf+0x26c>
    12f8:	18 f4       	brcc	.+6      	; 0x1300 <vfprintf+0x244>
    12fa:	88 35       	cpi	r24, 0x58	; 88
    12fc:	79 f0       	breq	.+30     	; 0x131c <vfprintf+0x260>
    12fe:	b5 c0       	rjmp	.+362    	; 0x146a <vfprintf+0x3ae>
    1300:	80 37       	cpi	r24, 0x70	; 112
    1302:	19 f0       	breq	.+6      	; 0x130a <vfprintf+0x24e>
    1304:	88 37       	cpi	r24, 0x78	; 120
    1306:	21 f0       	breq	.+8      	; 0x1310 <vfprintf+0x254>
    1308:	b0 c0       	rjmp	.+352    	; 0x146a <vfprintf+0x3ae>
    130a:	e9 2f       	mov	r30, r25
    130c:	e0 61       	ori	r30, 0x10	; 16
    130e:	be 2e       	mov	r11, r30
    1310:	b4 fe       	sbrs	r11, 4
    1312:	0d c0       	rjmp	.+26     	; 0x132e <vfprintf+0x272>
    1314:	fb 2d       	mov	r31, r11
    1316:	f4 60       	ori	r31, 0x04	; 4
    1318:	bf 2e       	mov	r11, r31
    131a:	09 c0       	rjmp	.+18     	; 0x132e <vfprintf+0x272>
    131c:	34 fe       	sbrs	r3, 4
    131e:	0a c0       	rjmp	.+20     	; 0x1334 <vfprintf+0x278>
    1320:	29 2f       	mov	r18, r25
    1322:	26 60       	ori	r18, 0x06	; 6
    1324:	b2 2e       	mov	r11, r18
    1326:	06 c0       	rjmp	.+12     	; 0x1334 <vfprintf+0x278>
    1328:	28 e0       	ldi	r18, 0x08	; 8
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	05 c0       	rjmp	.+10     	; 0x1338 <vfprintf+0x27c>
    132e:	20 e1       	ldi	r18, 0x10	; 16
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <vfprintf+0x27c>
    1334:	20 e1       	ldi	r18, 0x10	; 16
    1336:	32 e0       	ldi	r19, 0x02	; 2
    1338:	f8 01       	movw	r30, r16
    133a:	b7 fe       	sbrs	r11, 7
    133c:	07 c0       	rjmp	.+14     	; 0x134c <vfprintf+0x290>
    133e:	60 81       	ld	r22, Z
    1340:	71 81       	ldd	r23, Z+1	; 0x01
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	0c 5f       	subi	r16, 0xFC	; 252
    1348:	1f 4f       	sbci	r17, 0xFF	; 255
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <vfprintf+0x29c>
    134c:	60 81       	ld	r22, Z
    134e:	71 81       	ldd	r23, Z+1	; 0x01
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 5f       	subi	r16, 0xFE	; 254
    1356:	1f 4f       	sbci	r17, 0xFF	; 255
    1358:	a3 01       	movw	r20, r6
    135a:	0e 94 91 0a 	call	0x1522	; 0x1522 <__ultoa_invert>
    135e:	88 2e       	mov	r8, r24
    1360:	86 18       	sub	r8, r6
    1362:	fb 2d       	mov	r31, r11
    1364:	ff 77       	andi	r31, 0x7F	; 127
    1366:	3f 2e       	mov	r3, r31
    1368:	36 fe       	sbrs	r3, 6
    136a:	0d c0       	rjmp	.+26     	; 0x1386 <vfprintf+0x2ca>
    136c:	23 2d       	mov	r18, r3
    136e:	2e 7f       	andi	r18, 0xFE	; 254
    1370:	a2 2e       	mov	r10, r18
    1372:	89 14       	cp	r8, r9
    1374:	58 f4       	brcc	.+22     	; 0x138c <vfprintf+0x2d0>
    1376:	34 fe       	sbrs	r3, 4
    1378:	0b c0       	rjmp	.+22     	; 0x1390 <vfprintf+0x2d4>
    137a:	32 fc       	sbrc	r3, 2
    137c:	09 c0       	rjmp	.+18     	; 0x1390 <vfprintf+0x2d4>
    137e:	83 2d       	mov	r24, r3
    1380:	8e 7e       	andi	r24, 0xEE	; 238
    1382:	a8 2e       	mov	r10, r24
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <vfprintf+0x2d4>
    1386:	b8 2c       	mov	r11, r8
    1388:	a3 2c       	mov	r10, r3
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <vfprintf+0x2d6>
    138c:	b8 2c       	mov	r11, r8
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <vfprintf+0x2d6>
    1390:	b9 2c       	mov	r11, r9
    1392:	a4 fe       	sbrs	r10, 4
    1394:	0f c0       	rjmp	.+30     	; 0x13b4 <vfprintf+0x2f8>
    1396:	fe 01       	movw	r30, r28
    1398:	e8 0d       	add	r30, r8
    139a:	f1 1d       	adc	r31, r1
    139c:	80 81       	ld	r24, Z
    139e:	80 33       	cpi	r24, 0x30	; 48
    13a0:	21 f4       	brne	.+8      	; 0x13aa <vfprintf+0x2ee>
    13a2:	9a 2d       	mov	r25, r10
    13a4:	99 7e       	andi	r25, 0xE9	; 233
    13a6:	a9 2e       	mov	r10, r25
    13a8:	09 c0       	rjmp	.+18     	; 0x13bc <vfprintf+0x300>
    13aa:	a2 fe       	sbrs	r10, 2
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <vfprintf+0x2fe>
    13ae:	b3 94       	inc	r11
    13b0:	b3 94       	inc	r11
    13b2:	04 c0       	rjmp	.+8      	; 0x13bc <vfprintf+0x300>
    13b4:	8a 2d       	mov	r24, r10
    13b6:	86 78       	andi	r24, 0x86	; 134
    13b8:	09 f0       	breq	.+2      	; 0x13bc <vfprintf+0x300>
    13ba:	b3 94       	inc	r11
    13bc:	a3 fc       	sbrc	r10, 3
    13be:	11 c0       	rjmp	.+34     	; 0x13e2 <vfprintf+0x326>
    13c0:	a0 fe       	sbrs	r10, 0
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <vfprintf+0x314>
    13c4:	b2 14       	cp	r11, r2
    13c6:	88 f4       	brcc	.+34     	; 0x13ea <vfprintf+0x32e>
    13c8:	28 0c       	add	r2, r8
    13ca:	92 2c       	mov	r9, r2
    13cc:	9b 18       	sub	r9, r11
    13ce:	0e c0       	rjmp	.+28     	; 0x13ec <vfprintf+0x330>
    13d0:	b2 14       	cp	r11, r2
    13d2:	60 f4       	brcc	.+24     	; 0x13ec <vfprintf+0x330>
    13d4:	b6 01       	movw	r22, r12
    13d6:	80 e2       	ldi	r24, 0x20	; 32
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    13de:	b3 94       	inc	r11
    13e0:	f7 cf       	rjmp	.-18     	; 0x13d0 <vfprintf+0x314>
    13e2:	b2 14       	cp	r11, r2
    13e4:	18 f4       	brcc	.+6      	; 0x13ec <vfprintf+0x330>
    13e6:	2b 18       	sub	r2, r11
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <vfprintf+0x332>
    13ea:	98 2c       	mov	r9, r8
    13ec:	21 2c       	mov	r2, r1
    13ee:	a4 fe       	sbrs	r10, 4
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <vfprintf+0x356>
    13f2:	b6 01       	movw	r22, r12
    13f4:	80 e3       	ldi	r24, 0x30	; 48
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    13fc:	a2 fe       	sbrs	r10, 2
    13fe:	17 c0       	rjmp	.+46     	; 0x142e <vfprintf+0x372>
    1400:	a1 fc       	sbrc	r10, 1
    1402:	03 c0       	rjmp	.+6      	; 0x140a <vfprintf+0x34e>
    1404:	88 e7       	ldi	r24, 0x78	; 120
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x352>
    140a:	88 e5       	ldi	r24, 0x58	; 88
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	b6 01       	movw	r22, r12
    1410:	0c c0       	rjmp	.+24     	; 0x142a <vfprintf+0x36e>
    1412:	8a 2d       	mov	r24, r10
    1414:	86 78       	andi	r24, 0x86	; 134
    1416:	59 f0       	breq	.+22     	; 0x142e <vfprintf+0x372>
    1418:	a1 fe       	sbrs	r10, 1
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <vfprintf+0x364>
    141c:	8b e2       	ldi	r24, 0x2B	; 43
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <vfprintf+0x366>
    1420:	80 e2       	ldi	r24, 0x20	; 32
    1422:	a7 fc       	sbrc	r10, 7
    1424:	8d e2       	ldi	r24, 0x2D	; 45
    1426:	b6 01       	movw	r22, r12
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    142e:	89 14       	cp	r8, r9
    1430:	38 f4       	brcc	.+14     	; 0x1440 <vfprintf+0x384>
    1432:	b6 01       	movw	r22, r12
    1434:	80 e3       	ldi	r24, 0x30	; 48
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    143c:	9a 94       	dec	r9
    143e:	f7 cf       	rjmp	.-18     	; 0x142e <vfprintf+0x372>
    1440:	8a 94       	dec	r8
    1442:	f3 01       	movw	r30, r6
    1444:	e8 0d       	add	r30, r8
    1446:	f1 1d       	adc	r31, r1
    1448:	80 81       	ld	r24, Z
    144a:	b6 01       	movw	r22, r12
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1452:	81 10       	cpse	r8, r1
    1454:	f5 cf       	rjmp	.-22     	; 0x1440 <vfprintf+0x384>
    1456:	22 20       	and	r2, r2
    1458:	09 f4       	brne	.+2      	; 0x145c <vfprintf+0x3a0>
    145a:	42 ce       	rjmp	.-892    	; 0x10e0 <vfprintf+0x24>
    145c:	b6 01       	movw	r22, r12
    145e:	80 e2       	ldi	r24, 0x20	; 32
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 55 0a 	call	0x14aa	; 0x14aa <fputc>
    1466:	2a 94       	dec	r2
    1468:	f6 cf       	rjmp	.-20     	; 0x1456 <vfprintf+0x39a>
    146a:	f6 01       	movw	r30, r12
    146c:	86 81       	ldd	r24, Z+6	; 0x06
    146e:	97 81       	ldd	r25, Z+7	; 0x07
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x3ba>
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	9f ef       	ldi	r25, 0xFF	; 255
    1476:	2b 96       	adiw	r28, 0x0b	; 11
    1478:	e2 e1       	ldi	r30, 0x12	; 18
    147a:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__epilogue_restores__>

0000147e <strnlen_P>:
    147e:	fc 01       	movw	r30, r24
    1480:	05 90       	lpm	r0, Z+
    1482:	61 50       	subi	r22, 0x01	; 1
    1484:	70 40       	sbci	r23, 0x00	; 0
    1486:	01 10       	cpse	r0, r1
    1488:	d8 f7       	brcc	.-10     	; 0x1480 <strnlen_P+0x2>
    148a:	80 95       	com	r24
    148c:	90 95       	com	r25
    148e:	8e 0f       	add	r24, r30
    1490:	9f 1f       	adc	r25, r31
    1492:	08 95       	ret

00001494 <strnlen>:
    1494:	fc 01       	movw	r30, r24
    1496:	61 50       	subi	r22, 0x01	; 1
    1498:	70 40       	sbci	r23, 0x00	; 0
    149a:	01 90       	ld	r0, Z+
    149c:	01 10       	cpse	r0, r1
    149e:	d8 f7       	brcc	.-10     	; 0x1496 <strnlen+0x2>
    14a0:	80 95       	com	r24
    14a2:	90 95       	com	r25
    14a4:	8e 0f       	add	r24, r30
    14a6:	9f 1f       	adc	r25, r31
    14a8:	08 95       	ret

000014aa <fputc>:
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	fb 01       	movw	r30, r22
    14b4:	23 81       	ldd	r18, Z+3	; 0x03
    14b6:	21 fd       	sbrc	r18, 1
    14b8:	03 c0       	rjmp	.+6      	; 0x14c0 <fputc+0x16>
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
    14bc:	9f ef       	ldi	r25, 0xFF	; 255
    14be:	2c c0       	rjmp	.+88     	; 0x1518 <fputc+0x6e>
    14c0:	22 ff       	sbrs	r18, 2
    14c2:	16 c0       	rjmp	.+44     	; 0x14f0 <fputc+0x46>
    14c4:	46 81       	ldd	r20, Z+6	; 0x06
    14c6:	57 81       	ldd	r21, Z+7	; 0x07
    14c8:	24 81       	ldd	r18, Z+4	; 0x04
    14ca:	35 81       	ldd	r19, Z+5	; 0x05
    14cc:	42 17       	cp	r20, r18
    14ce:	53 07       	cpc	r21, r19
    14d0:	44 f4       	brge	.+16     	; 0x14e2 <fputc+0x38>
    14d2:	a0 81       	ld	r26, Z
    14d4:	b1 81       	ldd	r27, Z+1	; 0x01
    14d6:	9d 01       	movw	r18, r26
    14d8:	2f 5f       	subi	r18, 0xFF	; 255
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	31 83       	std	Z+1, r19	; 0x01
    14de:	20 83       	st	Z, r18
    14e0:	8c 93       	st	X, r24
    14e2:	26 81       	ldd	r18, Z+6	; 0x06
    14e4:	37 81       	ldd	r19, Z+7	; 0x07
    14e6:	2f 5f       	subi	r18, 0xFF	; 255
    14e8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ea:	37 83       	std	Z+7, r19	; 0x07
    14ec:	26 83       	std	Z+6, r18	; 0x06
    14ee:	14 c0       	rjmp	.+40     	; 0x1518 <fputc+0x6e>
    14f0:	8b 01       	movw	r16, r22
    14f2:	ec 01       	movw	r28, r24
    14f4:	fb 01       	movw	r30, r22
    14f6:	00 84       	ldd	r0, Z+8	; 0x08
    14f8:	f1 85       	ldd	r31, Z+9	; 0x09
    14fa:	e0 2d       	mov	r30, r0
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	e1 f6       	brne	.-72     	; 0x14ba <fputc+0x10>
    1502:	d8 01       	movw	r26, r16
    1504:	16 96       	adiw	r26, 0x06	; 6
    1506:	8d 91       	ld	r24, X+
    1508:	9c 91       	ld	r25, X
    150a:	17 97       	sbiw	r26, 0x07	; 7
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	17 96       	adiw	r26, 0x07	; 7
    1510:	9c 93       	st	X, r25
    1512:	8e 93       	st	-X, r24
    1514:	16 97       	sbiw	r26, 0x06	; 6
    1516:	ce 01       	movw	r24, r28
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <__ultoa_invert>:
    1522:	fa 01       	movw	r30, r20
    1524:	aa 27       	eor	r26, r26
    1526:	28 30       	cpi	r18, 0x08	; 8
    1528:	51 f1       	breq	.+84     	; 0x157e <__ultoa_invert+0x5c>
    152a:	20 31       	cpi	r18, 0x10	; 16
    152c:	81 f1       	breq	.+96     	; 0x158e <__ultoa_invert+0x6c>
    152e:	e8 94       	clt
    1530:	6f 93       	push	r22
    1532:	6e 7f       	andi	r22, 0xFE	; 254
    1534:	6e 5f       	subi	r22, 0xFE	; 254
    1536:	7f 4f       	sbci	r23, 0xFF	; 255
    1538:	8f 4f       	sbci	r24, 0xFF	; 255
    153a:	9f 4f       	sbci	r25, 0xFF	; 255
    153c:	af 4f       	sbci	r26, 0xFF	; 255
    153e:	b1 e0       	ldi	r27, 0x01	; 1
    1540:	3e d0       	rcall	.+124    	; 0x15be <__ultoa_invert+0x9c>
    1542:	b4 e0       	ldi	r27, 0x04	; 4
    1544:	3c d0       	rcall	.+120    	; 0x15be <__ultoa_invert+0x9c>
    1546:	67 0f       	add	r22, r23
    1548:	78 1f       	adc	r23, r24
    154a:	89 1f       	adc	r24, r25
    154c:	9a 1f       	adc	r25, r26
    154e:	a1 1d       	adc	r26, r1
    1550:	68 0f       	add	r22, r24
    1552:	79 1f       	adc	r23, r25
    1554:	8a 1f       	adc	r24, r26
    1556:	91 1d       	adc	r25, r1
    1558:	a1 1d       	adc	r26, r1
    155a:	6a 0f       	add	r22, r26
    155c:	71 1d       	adc	r23, r1
    155e:	81 1d       	adc	r24, r1
    1560:	91 1d       	adc	r25, r1
    1562:	a1 1d       	adc	r26, r1
    1564:	20 d0       	rcall	.+64     	; 0x15a6 <__ultoa_invert+0x84>
    1566:	09 f4       	brne	.+2      	; 0x156a <__ultoa_invert+0x48>
    1568:	68 94       	set
    156a:	3f 91       	pop	r19
    156c:	2a e0       	ldi	r18, 0x0A	; 10
    156e:	26 9f       	mul	r18, r22
    1570:	11 24       	eor	r1, r1
    1572:	30 19       	sub	r19, r0
    1574:	30 5d       	subi	r19, 0xD0	; 208
    1576:	31 93       	st	Z+, r19
    1578:	de f6       	brtc	.-74     	; 0x1530 <__ultoa_invert+0xe>
    157a:	cf 01       	movw	r24, r30
    157c:	08 95       	ret
    157e:	46 2f       	mov	r20, r22
    1580:	47 70       	andi	r20, 0x07	; 7
    1582:	40 5d       	subi	r20, 0xD0	; 208
    1584:	41 93       	st	Z+, r20
    1586:	b3 e0       	ldi	r27, 0x03	; 3
    1588:	0f d0       	rcall	.+30     	; 0x15a8 <__ultoa_invert+0x86>
    158a:	c9 f7       	brne	.-14     	; 0x157e <__ultoa_invert+0x5c>
    158c:	f6 cf       	rjmp	.-20     	; 0x157a <__ultoa_invert+0x58>
    158e:	46 2f       	mov	r20, r22
    1590:	4f 70       	andi	r20, 0x0F	; 15
    1592:	40 5d       	subi	r20, 0xD0	; 208
    1594:	4a 33       	cpi	r20, 0x3A	; 58
    1596:	18 f0       	brcs	.+6      	; 0x159e <__ultoa_invert+0x7c>
    1598:	49 5d       	subi	r20, 0xD9	; 217
    159a:	31 fd       	sbrc	r19, 1
    159c:	40 52       	subi	r20, 0x20	; 32
    159e:	41 93       	st	Z+, r20
    15a0:	02 d0       	rcall	.+4      	; 0x15a6 <__ultoa_invert+0x84>
    15a2:	a9 f7       	brne	.-22     	; 0x158e <__ultoa_invert+0x6c>
    15a4:	ea cf       	rjmp	.-44     	; 0x157a <__ultoa_invert+0x58>
    15a6:	b4 e0       	ldi	r27, 0x04	; 4
    15a8:	a6 95       	lsr	r26
    15aa:	97 95       	ror	r25
    15ac:	87 95       	ror	r24
    15ae:	77 95       	ror	r23
    15b0:	67 95       	ror	r22
    15b2:	ba 95       	dec	r27
    15b4:	c9 f7       	brne	.-14     	; 0x15a8 <__ultoa_invert+0x86>
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	61 05       	cpc	r22, r1
    15ba:	71 05       	cpc	r23, r1
    15bc:	08 95       	ret
    15be:	9b 01       	movw	r18, r22
    15c0:	ac 01       	movw	r20, r24
    15c2:	0a 2e       	mov	r0, r26
    15c4:	06 94       	lsr	r0
    15c6:	57 95       	ror	r21
    15c8:	47 95       	ror	r20
    15ca:	37 95       	ror	r19
    15cc:	27 95       	ror	r18
    15ce:	ba 95       	dec	r27
    15d0:	c9 f7       	brne	.-14     	; 0x15c4 <__ultoa_invert+0xa2>
    15d2:	62 0f       	add	r22, r18
    15d4:	73 1f       	adc	r23, r19
    15d6:	84 1f       	adc	r24, r20
    15d8:	95 1f       	adc	r25, r21
    15da:	a0 1d       	adc	r26, r0
    15dc:	08 95       	ret

000015de <__prologue_saves__>:
    15de:	2f 92       	push	r2
    15e0:	3f 92       	push	r3
    15e2:	4f 92       	push	r4
    15e4:	5f 92       	push	r5
    15e6:	6f 92       	push	r6
    15e8:	7f 92       	push	r7
    15ea:	8f 92       	push	r8
    15ec:	9f 92       	push	r9
    15ee:	af 92       	push	r10
    15f0:	bf 92       	push	r11
    15f2:	cf 92       	push	r12
    15f4:	df 92       	push	r13
    15f6:	ef 92       	push	r14
    15f8:	ff 92       	push	r15
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	ca 1b       	sub	r28, r26
    1608:	db 0b       	sbc	r29, r27
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	09 94       	ijmp

00001616 <__epilogue_restores__>:
    1616:	2a 88       	ldd	r2, Y+18	; 0x12
    1618:	39 88       	ldd	r3, Y+17	; 0x11
    161a:	48 88       	ldd	r4, Y+16	; 0x10
    161c:	5f 84       	ldd	r5, Y+15	; 0x0f
    161e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1620:	7d 84       	ldd	r7, Y+13	; 0x0d
    1622:	8c 84       	ldd	r8, Y+12	; 0x0c
    1624:	9b 84       	ldd	r9, Y+11	; 0x0b
    1626:	aa 84       	ldd	r10, Y+10	; 0x0a
    1628:	b9 84       	ldd	r11, Y+9	; 0x09
    162a:	c8 84       	ldd	r12, Y+8	; 0x08
    162c:	df 80       	ldd	r13, Y+7	; 0x07
    162e:	ee 80       	ldd	r14, Y+6	; 0x06
    1630:	fd 80       	ldd	r15, Y+5	; 0x05
    1632:	0c 81       	ldd	r16, Y+4	; 0x04
    1634:	1b 81       	ldd	r17, Y+3	; 0x03
    1636:	aa 81       	ldd	r26, Y+2	; 0x02
    1638:	b9 81       	ldd	r27, Y+1	; 0x01
    163a:	ce 0f       	add	r28, r30
    163c:	d1 1d       	adc	r29, r1
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	ed 01       	movw	r28, r26
    164a:	08 95       	ret

0000164c <_exit>:
    164c:	f8 94       	cli

0000164e <__stop_program>:
    164e:	ff cf       	rjmp	.-2      	; 0x164e <__stop_program>
