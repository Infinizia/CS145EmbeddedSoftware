
proj3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000212  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00000212  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001014  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c7  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000080c  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000308  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ce  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c4d  00000000  00000000  00002cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003943  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 00 01 	call	0x200	; 0x200 <main>
  7a:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <wait_avr>:
  WDTCR = 15;
}

void
wait_avr(unsigned short msec)
{
  82:	9c 01       	movw	r18, r24
  TCCR0 = 3;
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	83 bf       	out	0x33, r24	; 51
  while (msec--) {
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 50) * 0.000001);
  88:	8f ef       	ldi	r24, 0xFF	; 255

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  while (msec--) {
  8a:	08 c0       	rjmp	.+16     	; 0x9c <wait_avr+0x1a>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 50) * 0.000001);
  8c:	82 bf       	out	0x32, r24	; 50
    SET_BIT(TIFR, TOV0);
  8e:	98 b7       	in	r25, 0x38	; 56
  90:	91 60       	ori	r25, 0x01	; 1
  92:	98 bf       	out	0x38, r25	; 56
    WDR();
  94:	a8 95       	wdr
    while (!GET_BIT(TIFR, TOV0));
  96:	08 b6       	in	r0, 0x38	; 56
  98:	00 fe       	sbrs	r0, 0
  9a:	fd cf       	rjmp	.-6      	; 0x96 <wait_avr+0x14>

void
wait_avr(unsigned short msec)
{
  TCCR0 = 3;
  while (msec--) {
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	31 09       	sbc	r19, r1
  a0:	a8 f7       	brcc	.-22     	; 0x8c <wait_avr+0xa>
    TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 50) * 0.000001);
    SET_BIT(TIFR, TOV0);
    WDR();
    while (!GET_BIT(TIFR, TOV0));
  }
  TCCR0 = 0;
  a2:	13 be       	out	0x33, r1	; 51
  a4:	08 95       	ret

000000a6 <output>:
}

static void
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  a6:	66 23       	and	r22, r22
  a8:	11 f0       	breq	.+4      	; 0xae <output+0x8>
  aa:	c0 9a       	sbi	0x18, 0	; 24
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <output+0xa>
  ae:	c0 98       	cbi	0x18, 0	; 24
  CLR_BIT(PORT, RW_PIN);
  b0:	c1 98       	cbi	0x18, 1	; 24
#define EN_PIN  2

static inline void
set_data(unsigned char x)
{
  PORTD = x;
  b2:	82 bb       	out	0x12, r24	; 18
  DDRD = 0xff;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  b8:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  ba:	00 00       	nop
  NOP();
  bc:	00 00       	nop
  NOP();
  be:	00 00       	nop
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  CLR_BIT(PORT, RW_PIN);
  set_data(d);
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  CLR_BIT(PORT, EN_PIN);
  c0:	c2 98       	cbi	0x18, 2	; 24
  c2:	08 95       	ret

000000c4 <write>:

static unsigned char
input(unsigned char rs)
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  c4:	c0 98       	cbi	0x18, 0	; 24
  SET_BIT(PORT, RW_PIN);
  c6:	c1 9a       	sbi	0x18, 1	; 24
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  c8:	11 ba       	out	0x11, r1	; 17
  return PIND;
  ca:	90 b3       	in	r25, 0x10	; 16
{
  unsigned char d;
  if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  cc:	c2 9a       	sbi	0x18, 2	; 24
}

static inline void
sleep_700ns(void)
{
  NOP();
  ce:	00 00       	nop
  NOP();
  d0:	00 00       	nop
  NOP();
  d2:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
  DDRD = 0x00;
  d4:	11 ba       	out	0x11, r1	; 17
  return PIND;
  d6:	90 b3       	in	r25, 0x10	; 16
  SET_BIT(PORT, RW_PIN);
  get_data();
  SET_BIT(PORT, EN_PIN);
  sleep_700ns();
  d = get_data();
  CLR_BIT(PORT, EN_PIN);
  d8:	c2 98       	cbi	0x18, 2	; 24
}

static void
write(unsigned char c, unsigned char rs)
{
  while (input(0) & 0x80);
  da:	99 23       	and	r25, r25
  dc:	9c f3       	brlt	.-26     	; 0xc4 <write>
  output(c, rs);
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <output>
  e2:	08 95       	ret

000000e4 <ini_lcd>:
}

void
ini_lcd(void)
{
  SET_BIT(DDR, RS_PIN);
  e4:	b8 9a       	sbi	0x17, 0	; 23
  SET_BIT(DDR, RW_PIN);
  e6:	b9 9a       	sbi	0x17, 1	; 23
  SET_BIT(DDR, EN_PIN);
  e8:	ba 9a       	sbi	0x17, 2	; 23
  wait_avr(16);
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	80 e3       	ldi	r24, 0x30	; 48
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <output>
  wait_avr(5);
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  output(0x30, 0);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	80 e3       	ldi	r24, 0x30	; 48
 106:	0e 94 53 00 	call	0xa6	; 0xa6 <output>
  wait_avr(1);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
  write(0x3c, 0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	8c e3       	ldi	r24, 0x3C	; 60
 116:	0e 94 62 00 	call	0xc4	; 0xc4 <write>
  write(0x0c, 0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	0e 94 62 00 	call	0xc4	; 0xc4 <write>
  write(0x06, 0);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	0e 94 62 00 	call	0xc4	; 0xc4 <write>
  write(0x01, 0);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 62 00 	call	0xc4	; 0xc4 <write>
 132:	08 95       	ret

00000134 <init_speaker>:
		{113.6363636,440},
		{127.5510204,(392*2)}
	};
	
	play_music_volume(hot_cross_buns, numNotesCross, volumeRatio, tempo);
}
 134:	d0 9a       	sbi	0x1a, 0	; 26
 136:	d8 98       	cbi	0x1b, 0	; 27
 138:	08 95       	ret

0000013a <play_note>:
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	16 16       	cp	r1, r22
 148:	17 06       	cpc	r1, r23
 14a:	84 f4       	brge	.+32     	; 0x16c <play_note+0x32>
 14c:	7b 01       	movw	r14, r22
 14e:	8c 01       	movw	r16, r24
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	d8 9a       	sbi	0x1b, 0	; 27
 156:	c8 01       	movw	r24, r16
 158:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
 15c:	d8 98       	cbi	0x1b, 0	; 27
 15e:	c8 01       	movw	r24, r16
 160:	0e 94 41 00 	call	0x82	; 0x82 <wait_avr>
 164:	21 96       	adiw	r28, 0x01	; 1
 166:	ec 16       	cp	r14, r28
 168:	fd 06       	cpc	r15, r29
 16a:	a1 f7       	brne	.-24     	; 0x154 <play_note+0x1a>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	08 95       	ret

0000017a <play_music>:
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	16 16       	cp	r1, r22
 188:	17 06       	cpc	r1, r23
 18a:	8c f4       	brge	.+34     	; 0x1ae <play_music+0x34>
 18c:	7b 01       	movw	r14, r22
 18e:	c8 2f       	mov	r28, r24
 190:	d9 2f       	mov	r29, r25
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	6a 81       	ldd	r22, Y+2	; 0x02
 198:	7b 81       	ldd	r23, Y+3	; 0x03
 19a:	88 81       	ld	r24, Y
 19c:	99 81       	ldd	r25, Y+1	; 0x01
 19e:	0e 94 9d 00 	call	0x13a	; 0x13a <play_note>
 1a2:	0f 5f       	subi	r16, 0xFF	; 255
 1a4:	1f 4f       	sbci	r17, 0xFF	; 255
 1a6:	24 96       	adiw	r28, 0x04	; 4
 1a8:	e0 16       	cp	r14, r16
 1aa:	f1 06       	cpc	r15, r17
 1ac:	a1 f7       	brne	.-24     	; 0x196 <play_music+0x1c>
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	08 95       	ret

000001bc <play_test>:

void play_test()
{
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
 1c4:	28 97       	sbiw	r28, 0x08	; 8
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
	int numOfNotes = 2;
	struct note test[] = {
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	e4 ea       	ldi	r30, 0xA4	; 164
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	de 01       	movw	r26, r28
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	01 90       	ld	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	8a 95       	dec	r24
 1e0:	e1 f7       	brne	.-8      	; 0x1da <play_test+0x1e>
			{440,113},
			{466,107},
		};
		play_music(test,numOfNotes);
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	0e 94 bd 00 	call	0x17a	; 0x17a <play_music>
}
 1ee:	28 96       	adiw	r28, 0x08	; 8
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	f8 94       	cli
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	0f be       	out	0x3f, r0	; 63
 1f8:	cd bf       	out	0x3d, r28	; 61
 1fa:	df 91       	pop	r29
 1fc:	cf 91       	pop	r28
 1fe:	08 95       	ret

00000200 <main>:
int main(void)
{
	
	//Initialize LCD
    ini_lcd();
 200:	0e 94 72 00 	call	0xe4	; 0xe4 <ini_lcd>
	init_speaker();
 204:	0e 94 9a 00 	call	0x134	; 0x134 <init_speaker>
    {
		//test_speaker();
		//play_note(A.freq,A.dur);
		//play_music(test,4);
		//playHotCrossBuns(2,0.5);
		play_test();
 208:	0e 94 de 00 	call	0x1bc	; 0x1bc <play_test>
 20c:	fd cf       	rjmp	.-6      	; 0x208 <main+0x8>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
